<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="854" onload="init(evt)" viewBox="0 0 1200 854" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="854" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="837.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="837.00"> </text><svg id="frames" x="10" width="1180" total_samples="282"><g><title>`0x7FFC3F1CAA30 (1 samples, 0.35%)</title><rect x="0.0000%" y="789" width="0.3546%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="799.50"></text></g><g><title>`0x7FFC3F193C57 (1 samples, 0.35%)</title><rect x="0.3546%" y="693" width="0.3546%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="1"/><text x="0.6046%" y="703.50"></text></g><g><title>`0x7FFC3F193C66 (2 samples, 0.71%)</title><rect x="0.7092%" y="693" width="0.7092%" height="15" fill="rgb(221,193,54)" fg:x="2" fg:w="2"/><text x="0.9592%" y="703.50"></text></g><g><title>`0x7FFC3F180E8B (4 samples, 1.42%)</title><rect x="0.3546%" y="709" width="1.4184%" height="15" fill="rgb(248,212,6)" fg:x="1" fg:w="4"/><text x="0.6046%" y="719.50"></text></g><g><title>`0x7FFC3F193C76 (1 samples, 0.35%)</title><rect x="1.4184%" y="693" width="0.3546%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="1"/><text x="1.6684%" y="703.50"></text></g><g><title>`0x7FFC3F180AFE (2 samples, 0.71%)</title><rect x="1.7730%" y="693" width="0.7092%" height="15" fill="rgb(232,128,0)" fg:x="5" fg:w="2"/><text x="2.0230%" y="703.50"></text></g><g><title>`0x7FFC3F19DB51 (2 samples, 0.71%)</title><rect x="1.7730%" y="677" width="0.7092%" height="15" fill="rgb(207,160,47)" fg:x="5" fg:w="2"/><text x="2.0230%" y="687.50"></text></g><g><title>`0x7FFC3F19A407 (2 samples, 0.71%)</title><rect x="1.7730%" y="661" width="0.7092%" height="15" fill="rgb(228,23,34)" fg:x="5" fg:w="2"/><text x="2.0230%" y="671.50"></text></g><g><title>`0x7FFC3F19AC49 (2 samples, 0.71%)</title><rect x="1.7730%" y="645" width="0.7092%" height="15" fill="rgb(218,30,26)" fg:x="5" fg:w="2"/><text x="2.0230%" y="655.50"></text></g><g><title>`0x7FFC3F20FB14 (2 samples, 0.71%)</title><rect x="1.7730%" y="629" width="0.7092%" height="15" fill="rgb(220,122,19)" fg:x="5" fg:w="2"/><text x="2.0230%" y="639.50"></text></g><g><title>`0x7FFC3F19C254 (1 samples, 0.35%)</title><rect x="2.4823%" y="661" width="0.3546%" height="15" fill="rgb(250,228,42)" fg:x="7" fg:w="1"/><text x="2.7323%" y="671.50"></text></g><g><title>`0x7FFC3F19C0CA (1 samples, 0.35%)</title><rect x="2.4823%" y="645" width="0.3546%" height="15" fill="rgb(240,193,28)" fg:x="7" fg:w="1"/><text x="2.7323%" y="655.50"></text></g><g><title>`0x7FFC3F19C4CC (1 samples, 0.35%)</title><rect x="2.4823%" y="629" width="0.3546%" height="15" fill="rgb(216,20,37)" fg:x="7" fg:w="1"/><text x="2.7323%" y="639.50"></text></g><g><title>`0x7FFC3F20F874 (1 samples, 0.35%)</title><rect x="2.4823%" y="613" width="0.3546%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="2.7323%" y="623.50"></text></g><g><title>`0x7FFC3F19C399 (1 samples, 0.35%)</title><rect x="2.8369%" y="661" width="0.3546%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="3.0869%" y="671.50"></text></g><g><title>`0x7FFC3F19AFAC (1 samples, 0.35%)</title><rect x="2.8369%" y="645" width="0.3546%" height="15" fill="rgb(231,73,38)" fg:x="8" fg:w="1"/><text x="3.0869%" y="655.50"></text></g><g><title>`0x7FFC3F19BC0D (1 samples, 0.35%)</title><rect x="2.8369%" y="629" width="0.3546%" height="15" fill="rgb(225,20,46)" fg:x="8" fg:w="1"/><text x="3.0869%" y="639.50"></text></g><g><title>`0x7FFC3F1A290B (1 samples, 0.35%)</title><rect x="2.8369%" y="613" width="0.3546%" height="15" fill="rgb(210,31,41)" fg:x="8" fg:w="1"/><text x="3.0869%" y="623.50"></text></g><g><title>`0x7FFC3F1A5986 (9 samples, 3.19%)</title><rect x="0.3546%" y="757" width="3.1915%" height="15" fill="rgb(221,200,47)" fg:x="1" fg:w="9"/><text x="0.6046%" y="767.50">`0x..</text></g><g><title>`0x7FFC3F1D23CA (9 samples, 3.19%)</title><rect x="0.3546%" y="741" width="3.1915%" height="15" fill="rgb(226,26,5)" fg:x="1" fg:w="9"/><text x="0.6046%" y="751.50">`0x..</text></g><g><title>`0x7FFC3F180DCB (9 samples, 3.19%)</title><rect x="0.3546%" y="725" width="3.1915%" height="15" fill="rgb(249,33,26)" fg:x="1" fg:w="9"/><text x="0.6046%" y="735.50">`0x..</text></g><g><title>`0x7FFC3F180F90 (5 samples, 1.77%)</title><rect x="1.7730%" y="709" width="1.7730%" height="15" fill="rgb(235,183,28)" fg:x="5" fg:w="5"/><text x="2.0230%" y="719.50">`..</text></g><g><title>`0x7FFC3F180BC8 (3 samples, 1.06%)</title><rect x="2.4823%" y="693" width="1.0638%" height="15" fill="rgb(221,5,38)" fg:x="7" fg:w="3"/><text x="2.7323%" y="703.50"></text></g><g><title>`0x7FFC3F18070F (3 samples, 1.06%)</title><rect x="2.4823%" y="677" width="1.0638%" height="15" fill="rgb(247,18,42)" fg:x="7" fg:w="3"/><text x="2.7323%" y="687.50"></text></g><g><title>`0x7FFC3F19C3F8 (1 samples, 0.35%)</title><rect x="3.1915%" y="661" width="0.3546%" height="15" fill="rgb(241,131,45)" fg:x="9" fg:w="1"/><text x="3.4415%" y="671.50"></text></g><g><title>`0x7FFC3F1946BB (1 samples, 0.35%)</title><rect x="3.1915%" y="645" width="0.3546%" height="15" fill="rgb(249,31,29)" fg:x="9" fg:w="1"/><text x="3.4415%" y="655.50"></text></g><g><title>`0x7FFC3F194906 (1 samples, 0.35%)</title><rect x="3.1915%" y="629" width="0.3546%" height="15" fill="rgb(225,111,53)" fg:x="9" fg:w="1"/><text x="3.4415%" y="639.50"></text></g><g><title>`0x7FFC3F194E71 (1 samples, 0.35%)</title><rect x="3.1915%" y="613" width="0.3546%" height="15" fill="rgb(238,160,17)" fg:x="9" fg:w="1"/><text x="3.4415%" y="623.50"></text></g><g><title>`0x7FFC3F1897EA (1 samples, 0.35%)</title><rect x="3.1915%" y="597" width="0.3546%" height="15" fill="rgb(214,148,48)" fg:x="9" fg:w="1"/><text x="3.4415%" y="607.50"></text></g><g><title>`0x7FFC3F189901 (1 samples, 0.35%)</title><rect x="3.1915%" y="581" width="0.3546%" height="15" fill="rgb(232,36,49)" fg:x="9" fg:w="1"/><text x="3.4415%" y="591.50"></text></g><g><title>`0x7FFC3F18065C (1 samples, 0.35%)</title><rect x="3.5461%" y="581" width="0.3546%" height="15" fill="rgb(209,103,24)" fg:x="10" fg:w="1"/><text x="3.7961%" y="591.50"></text></g><g><title>`0x7FFC3F20F9D4 (1 samples, 0.35%)</title><rect x="3.5461%" y="565" width="0.3546%" height="15" fill="rgb(229,88,8)" fg:x="10" fg:w="1"/><text x="3.7961%" y="575.50"></text></g><g><title>`0x7FFC3CDBBAE8 (2 samples, 0.71%)</title><rect x="3.5461%" y="725" width="0.7092%" height="15" fill="rgb(213,181,19)" fg:x="10" fg:w="2"/><text x="3.7961%" y="735.50"></text></g><g><title>`0x7FFC3CDC8F91 (2 samples, 0.71%)</title><rect x="3.5461%" y="709" width="0.7092%" height="15" fill="rgb(254,191,54)" fg:x="10" fg:w="2"/><text x="3.7961%" y="719.50"></text></g><g><title>`0x7FFC3CDC1843 (2 samples, 0.71%)</title><rect x="3.5461%" y="693" width="0.7092%" height="15" fill="rgb(241,83,37)" fg:x="10" fg:w="2"/><text x="3.7961%" y="703.50"></text></g><g><title>`0x7FFC3C5C6452 (2 samples, 0.71%)</title><rect x="3.5461%" y="677" width="0.7092%" height="15" fill="rgb(233,36,39)" fg:x="10" fg:w="2"/><text x="3.7961%" y="687.50"></text></g><g><title>`0x7FFC3F19A25A (2 samples, 0.71%)</title><rect x="3.5461%" y="661" width="0.7092%" height="15" fill="rgb(226,3,54)" fg:x="10" fg:w="2"/><text x="3.7961%" y="671.50"></text></g><g><title>`0x7FFC3F188CAC (2 samples, 0.71%)</title><rect x="3.5461%" y="645" width="0.7092%" height="15" fill="rgb(245,192,40)" fg:x="10" fg:w="2"/><text x="3.7961%" y="655.50"></text></g><g><title>`0x7FFC3F1988D4 (2 samples, 0.71%)</title><rect x="3.5461%" y="629" width="0.7092%" height="15" fill="rgb(238,167,29)" fg:x="10" fg:w="2"/><text x="3.7961%" y="639.50"></text></g><g><title>`0x7FFC3F180EBF (2 samples, 0.71%)</title><rect x="3.5461%" y="613" width="0.7092%" height="15" fill="rgb(232,182,51)" fg:x="10" fg:w="2"/><text x="3.7961%" y="623.50"></text></g><g><title>`0x7FFC3F1810F0 (2 samples, 0.71%)</title><rect x="3.5461%" y="597" width="0.7092%" height="15" fill="rgb(231,60,39)" fg:x="10" fg:w="2"/><text x="3.7961%" y="607.50"></text></g><g><title>`0x7FFC3F18070F (1 samples, 0.35%)</title><rect x="3.9007%" y="581" width="0.3546%" height="15" fill="rgb(208,69,12)" fg:x="11" fg:w="1"/><text x="4.1507%" y="591.50"></text></g><g><title>`0x7FFC3F19C3F8 (1 samples, 0.35%)</title><rect x="3.9007%" y="565" width="0.3546%" height="15" fill="rgb(235,93,37)" fg:x="11" fg:w="1"/><text x="4.1507%" y="575.50"></text></g><g><title>`0x7FFC3F1946BB (1 samples, 0.35%)</title><rect x="3.9007%" y="549" width="0.3546%" height="15" fill="rgb(213,116,39)" fg:x="11" fg:w="1"/><text x="4.1507%" y="559.50"></text></g><g><title>`0x7FFC3F194906 (1 samples, 0.35%)</title><rect x="3.9007%" y="533" width="0.3546%" height="15" fill="rgb(222,207,29)" fg:x="11" fg:w="1"/><text x="4.1507%" y="543.50"></text></g><g><title>`0x7FFC3F195363 (1 samples, 0.35%)</title><rect x="3.9007%" y="517" width="0.3546%" height="15" fill="rgb(206,96,30)" fg:x="11" fg:w="1"/><text x="4.1507%" y="527.50"></text></g><g><title>`0x7FFC3CDBBCD9 (3 samples, 1.06%)</title><rect x="3.5461%" y="741" width="1.0638%" height="15" fill="rgb(218,138,4)" fg:x="10" fg:w="3"/><text x="3.7961%" y="751.50"></text></g><g><title>`0x7FFC3CDBBB18 (1 samples, 0.35%)</title><rect x="4.2553%" y="725" width="0.3546%" height="15" fill="rgb(250,191,14)" fg:x="12" fg:w="1"/><text x="4.5053%" y="735.50"></text></g><g><title>`0x7FFC3DDE7FAB (1 samples, 0.35%)</title><rect x="4.2553%" y="709" width="0.3546%" height="15" fill="rgb(239,60,40)" fg:x="12" fg:w="1"/><text x="4.5053%" y="719.50"></text></g><g><title>`0x7FFC3F1C0C44 (1 samples, 0.35%)</title><rect x="4.2553%" y="693" width="0.3546%" height="15" fill="rgb(206,27,48)" fg:x="12" fg:w="1"/><text x="4.5053%" y="703.50"></text></g><g><title>`0x7FFC3F20F8F4 (1 samples, 0.35%)</title><rect x="4.2553%" y="677" width="0.3546%" height="15" fill="rgb(225,35,8)" fg:x="12" fg:w="1"/><text x="4.5053%" y="687.50"></text></g><g><title>`0x7FFC3CDC4EAD (1 samples, 0.35%)</title><rect x="4.6099%" y="741" width="0.3546%" height="15" fill="rgb(250,213,24)" fg:x="13" fg:w="1"/><text x="4.8599%" y="751.50"></text></g><g><title>part2.exe`std::sys::windows::compat::init (1 samples, 0.35%)</title><rect x="4.6099%" y="725" width="0.3546%" height="15" fill="rgb(247,123,22)" fg:x="13" fg:w="1"/><text x="4.8599%" y="735.50"></text></g><g><title>part2.exe`std::sys::windows::compat::load_synch_functions (1 samples, 0.35%)</title><rect x="4.6099%" y="709" width="0.3546%" height="15" fill="rgb(231,138,38)" fg:x="13" fg:w="1"/><text x="4.8599%" y="719.50"></text></g><g><title>part2.exe`std::sys::windows::compat::load_synch_functions::try_load (1 samples, 0.35%)</title><rect x="4.6099%" y="693" width="0.3546%" height="15" fill="rgb(231,145,46)" fg:x="13" fg:w="1"/><text x="4.8599%" y="703.50"></text></g><g><title>part2.exe`core::option::impl$40::branch (1 samples, 0.35%)</title><rect x="4.6099%" y="677" width="0.3546%" height="15" fill="rgb(251,118,11)" fg:x="13" fg:w="1"/><text x="4.8599%" y="687.50"></text></g><g><title>`0x7FFC3C5F1C78 (1 samples, 0.35%)</title><rect x="4.6099%" y="661" width="0.3546%" height="15" fill="rgb(217,147,25)" fg:x="13" fg:w="1"/><text x="4.8599%" y="671.50"></text></g><g><title>`0x7FFC3C5CD36D (1 samples, 0.35%)</title><rect x="4.6099%" y="645" width="0.3546%" height="15" fill="rgb(247,81,37)" fg:x="13" fg:w="1"/><text x="4.8599%" y="655.50"></text></g><g><title>`0x7FFC3F1DAE84 (1 samples, 0.35%)</title><rect x="4.6099%" y="629" width="0.3546%" height="15" fill="rgb(209,12,38)" fg:x="13" fg:w="1"/><text x="4.8599%" y="639.50"></text></g><g><title>part2.exe`core::ops::function::FnOnce::call_once (1 samples, 0.35%)</title><rect x="4.9645%" y="645" width="0.3546%" height="15" fill="rgb(227,1,9)" fg:x="14" fg:w="1"/><text x="5.2145%" y="655.50"></text></g><g><title>part2.exe`std::rt::cleanup (1 samples, 0.35%)</title><rect x="4.9645%" y="629" width="0.3546%" height="15" fill="rgb(248,47,43)" fg:x="14" fg:w="1"/><text x="5.2145%" y="639.50"></text></g><g><title>part2.exe`std::sync::once::Once::call_once (1 samples, 0.35%)</title><rect x="4.9645%" y="613" width="0.3546%" height="15" fill="rgb(221,10,30)" fg:x="14" fg:w="1"/><text x="5.2145%" y="623.50"></text></g><g><title>part2.exe`std::sys_common::once::queue::Once::call (1 samples, 0.35%)</title><rect x="4.9645%" y="597" width="0.3546%" height="15" fill="rgb(210,229,1)" fg:x="14" fg:w="1"/><text x="5.2145%" y="607.50"></text></g><g><title>part2.exe`core::cell::Cell::get (1 samples, 0.35%)</title><rect x="4.9645%" y="581" width="0.3546%" height="15" fill="rgb(222,148,37)" fg:x="14" fg:w="1"/><text x="5.2145%" y="591.50"></text></g><g><title>part2.exe`std::sync::once::impl$2::call_once::closure$0&lt;std::rt::cleanup::closure_env$0&gt; (1 samples, 0.35%)</title><rect x="4.9645%" y="565" width="0.3546%" height="15" fill="rgb(234,67,33)" fg:x="14" fg:w="1"/><text x="5.2145%" y="575.50"></text></g><g><title>part2.exe`alloc::string::impl$41::to_string (1 samples, 0.35%)</title><rect x="5.3191%" y="501" width="0.3546%" height="15" fill="rgb(247,98,35)" fg:x="15" fg:w="1"/><text x="5.5691%" y="511.50"></text></g><g><title>part2.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,core::fmt::Error&gt; &gt;::expect(enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,core::fmt::Error&gt; &gt;, ref$ (1 samples, 0.35%)</title><rect x="5.3191%" y="485" width="0.3546%" height="15" fill="rgb(247,138,52)" fg:x="15" fg:w="1"/><text x="5.5691%" y="495.50"></text></g><g><title>part2.exe`core::fmt::num::imp::impl$7::fmt (1 samples, 0.35%)</title><rect x="5.3191%" y="469" width="0.3546%" height="15" fill="rgb(213,79,30)" fg:x="15" fg:w="1"/><text x="5.5691%" y="479.50"></text></g><g><title>part2.exe`core::iter::adapters::flatten::and_then_or_clear(enum2$&lt;core::option::Option&lt;core::slice::iter::Iter&lt;day_14::part2::Character&gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;ref$&lt;day_14::part2::Character&gt; &gt; &gt; (*)(core::slice::iter::Iter (1 samples, 0.35%)</title><rect x="10.9929%" y="437" width="0.3546%" height="15" fill="rgb(246,177,23)" fg:x="31" fg:w="1"/><text x="11.2429%" y="447.50"></text></g><g><title>part2.exe`enum2$&lt;core::option::Option&lt;core::slice::iter::Iter&lt;day_14::part2::Character&gt; &gt; &gt;::as_mut (1 samples, 0.35%)</title><rect x="10.9929%" y="421" width="0.3546%" height="15" fill="rgb(230,62,27)" fg:x="31" fg:w="1"/><text x="11.2429%" y="431.50"></text></g><g><title>part2.exe`core::iter::adapters::enumerate::impl$1::next(core::iter::adapters::enumerate::Enumerate&lt;core::iter::adapters::flatten::Flatten&lt;core::slice::iter::Iter&lt;alloc::vec::Vec (3 samples, 1.06%)</title><rect x="10.9929%" y="485" width="1.0638%" height="15" fill="rgb(216,154,8)" fg:x="31" fg:w="3"/><text x="11.2429%" y="495.50"></text></g><g><title>part2.exe`core::iter::adapters::flatten::impl$25::next(core::iter::adapters::flatten::Flatten&lt;core::slice::iter::Iter&lt;alloc::vec::Vec (3 samples, 1.06%)</title><rect x="10.9929%" y="469" width="1.0638%" height="15" fill="rgb(244,35,45)" fg:x="31" fg:w="3"/><text x="11.2429%" y="479.50"></text></g><g><title>part2.exe`core::iter::adapters::flatten::impl$35::next(core::iter::adapters::flatten::FlattenCompat&lt;core::slice::iter::Iter&lt;alloc::vec::Vec&lt;day_14::part2::Character,alloc::alloc::Global&gt; &gt;,core::slice::iter::Iter (3 samples, 1.06%)</title><rect x="10.9929%" y="453" width="1.0638%" height="15" fill="rgb(251,115,12)" fg:x="31" fg:w="3"/><text x="11.2429%" y="463.50"></text></g><g><title>part2.exe`core::iter::adapters::fuse::impl$3::next(core::iter::adapters::fuse::Fuse&lt;core::slice::iter::Iter&lt;alloc::vec::Vec (2 samples, 0.71%)</title><rect x="11.3475%" y="437" width="0.7092%" height="15" fill="rgb(240,54,50)" fg:x="32" fg:w="2"/><text x="11.5975%" y="447.50"></text></g><g><title>part2.exe`core::iter::adapters::fuse::impl$11::next(core::iter::adapters::fuse::Fuse&lt;core::slice::iter::Iter&lt;alloc::vec::Vec (2 samples, 0.71%)</title><rect x="11.3475%" y="421" width="0.7092%" height="15" fill="rgb(233,84,52)" fg:x="32" fg:w="2"/><text x="11.5975%" y="431.50"></text></g><g><title>part2.exe`alloc::vec::impl$12::index(alloc::vec::Vec (19 samples, 6.74%)</title><rect x="39.3617%" y="453" width="6.7376%" height="15" fill="rgb(207,117,47)" fg:x="111" fg:w="19"/><text x="39.6117%" y="463.50">part2.exe..</text></g><g><title>part2.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (19 samples, 6.74%)</title><rect x="39.3617%" y="437" width="6.7376%" height="15" fill="rgb(249,43,39)" fg:x="111" fg:w="19"/><text x="39.6117%" y="447.50">part2.exe..</text></g><g><title>part2.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (19 samples, 6.74%)</title><rect x="39.3617%" y="421" width="6.7376%" height="15" fill="rgb(209,38,44)" fg:x="111" fg:w="19"/><text x="39.6117%" y="431.50">part2.exe..</text></g><g><title>part2.exe`alloc::vec::impl$13::index_mut(alloc::vec::Vec (13 samples, 4.61%)</title><rect x="46.0993%" y="453" width="4.6099%" height="15" fill="rgb(236,212,23)" fg:x="130" fg:w="13"/><text x="46.3493%" y="463.50">part2..</text></g><g><title>part2.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (13 samples, 4.61%)</title><rect x="46.0993%" y="437" width="4.6099%" height="15" fill="rgb(242,79,21)" fg:x="130" fg:w="13"/><text x="46.3493%" y="447.50">part2..</text></g><g><title>part2.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (13 samples, 4.61%)</title><rect x="46.0993%" y="421" width="4.6099%" height="15" fill="rgb(211,96,35)" fg:x="130" fg:w="13"/><text x="46.3493%" y="431.50">part2..</text></g><g><title>part2.exe`alloc::vec::impl$13::index_mut(alloc::vec::Vec&lt;alloc::vec::Vec (29 samples, 10.28%)</title><rect x="50.7092%" y="453" width="10.2837%" height="15" fill="rgb(253,215,40)" fg:x="143" fg:w="29"/><text x="50.9592%" y="463.50">part2.exe`alloc..</text></g><g><title>part2.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$&lt;alloc::vec::Vec (29 samples, 10.28%)</title><rect x="50.7092%" y="437" width="10.2837%" height="15" fill="rgb(211,81,21)" fg:x="143" fg:w="29"/><text x="50.9592%" y="447.50">part2.exe`core:..</text></g><g><title>part2.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$&lt;alloc::vec::Vec (29 samples, 10.28%)</title><rect x="50.7092%" y="421" width="10.2837%" height="15" fill="rgb(208,190,38)" fg:x="143" fg:w="29"/><text x="50.9592%" y="431.50">part2.exe`core:..</text></g><g><title>part2.exe`core::iter::range::impl$6::next(core::ops::range::Range (11 samples, 3.90%)</title><rect x="60.9929%" y="453" width="3.9007%" height="15" fill="rgb(235,213,38)" fg:x="172" fg:w="11"/><text x="61.2429%" y="463.50">part..</text></g><g><title>part2.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (11 samples, 3.90%)</title><rect x="60.9929%" y="437" width="3.9007%" height="15" fill="rgb(237,122,38)" fg:x="172" fg:w="11"/><text x="61.2429%" y="447.50">part..</text></g><g><title>part2.exe`core::cmp::impls::impl$54::lt (5 samples, 1.77%)</title><rect x="63.1206%" y="421" width="1.7730%" height="15" fill="rgb(244,218,35)" fg:x="178" fg:w="5"/><text x="63.3706%" y="431.50">p..</text></g><g><title>part2.exe`day_14::part2::move_rocks(alloc::vec::Vec&lt;alloc::vec::Vec (154 samples, 54.61%)</title><rect x="12.0567%" y="469" width="54.6099%" height="15" fill="rgb(240,68,47)" fg:x="34" fg:w="154"/><text x="12.3067%" y="479.50">part2.exe`day_14::part2::move_rocks(alloc::vec::Vec&lt;alloc::vec::Vec</text></g><g><title>part2.exe`core::ptr::swap (5 samples, 1.77%)</title><rect x="64.8936%" y="453" width="1.7730%" height="15" fill="rgb(210,16,53)" fg:x="183" fg:w="5"/><text x="65.1436%" y="463.50">p..</text></g><g><title>part2.exe`core::intrinsics::copy (5 samples, 1.77%)</title><rect x="64.8936%" y="437" width="1.7730%" height="15" fill="rgb(235,124,12)" fg:x="183" fg:w="5"/><text x="65.1436%" y="447.50">p..</text></g><g><title>part2.exe`alloc::vec::impl$13::index_mut(alloc::vec::Vec (6 samples, 2.13%)</title><rect x="68.4397%" y="453" width="2.1277%" height="15" fill="rgb(224,169,11)" fg:x="193" fg:w="6"/><text x="68.6897%" y="463.50">p..</text></g><g><title>part2.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (6 samples, 2.13%)</title><rect x="68.4397%" y="437" width="2.1277%" height="15" fill="rgb(250,166,2)" fg:x="193" fg:w="6"/><text x="68.6897%" y="447.50">p..</text></g><g><title>part2.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (6 samples, 2.13%)</title><rect x="68.4397%" y="421" width="2.1277%" height="15" fill="rgb(242,216,29)" fg:x="193" fg:w="6"/><text x="68.6897%" y="431.50">p..</text></g><g><title>part2.exe`core::iter::range::impl$6::next(core::ops::range::Range (2 samples, 0.71%)</title><rect x="70.5674%" y="453" width="0.7092%" height="15" fill="rgb(230,116,27)" fg:x="199" fg:w="2"/><text x="70.8174%" y="463.50"></text></g><g><title>part2.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (2 samples, 0.71%)</title><rect x="70.5674%" y="437" width="0.7092%" height="15" fill="rgb(228,99,48)" fg:x="199" fg:w="2"/><text x="70.8174%" y="447.50"></text></g><g><title>part2.exe`core::cmp::impls::impl$54::lt (1 samples, 0.35%)</title><rect x="70.9220%" y="421" width="0.3546%" height="15" fill="rgb(253,11,6)" fg:x="200" fg:w="1"/><text x="71.1720%" y="431.50"></text></g><g><title>part2.exe`core::intrinsics::copy (30 samples, 10.64%)</title><rect x="71.2766%" y="437" width="10.6383%" height="15" fill="rgb(247,143,39)" fg:x="201" fg:w="30"/><text x="71.5266%" y="447.50">part2.exe`core::..</text></g><g><title>part2.exe`day_14::part2::create_vec_id(ref$&lt;slice2$&lt;alloc::vec::Vec (220 samples, 78.01%)</title><rect x="5.6738%" y="501" width="78.0142%" height="15" fill="rgb(236,97,10)" fg:x="16" fg:w="220"/><text x="5.9238%" y="511.50">part2.exe`day_14::part2::create_vec_id(ref$&lt;slice2$&lt;alloc::vec::Vec</text></g><g><title>part2.exe`day_14::part2::make_cycle(alloc::vec::Vec&lt;alloc::vec::Vec (202 samples, 71.63%)</title><rect x="12.0567%" y="485" width="71.6312%" height="15" fill="rgb(233,208,19)" fg:x="34" fg:w="202"/><text x="12.3067%" y="495.50">part2.exe`day_14::part2::make_cycle(alloc::vec::Vec&lt;alloc::vec::Vec</text></g><g><title>part2.exe`day_14::part2::rotate(alloc::vec::Vec&lt;alloc::vec::Vec (48 samples, 17.02%)</title><rect x="66.6667%" y="469" width="17.0213%" height="15" fill="rgb(216,164,2)" fg:x="188" fg:w="48"/><text x="66.9167%" y="479.50">part2.exe`day_14::part2::r..</text></g><g><title>part2.exe`core::ptr::swap (35 samples, 12.41%)</title><rect x="71.2766%" y="453" width="12.4113%" height="15" fill="rgb(220,129,5)" fg:x="201" fg:w="35"/><text x="71.5266%" y="463.50">part2.exe`core::ptr..</text></g><g><title>part2.exe`core::intrinsics::copy_nonoverlapping (5 samples, 1.77%)</title><rect x="81.9149%" y="437" width="1.7730%" height="15" fill="rgb(242,17,10)" fg:x="231" fg:w="5"/><text x="82.1649%" y="447.50">p..</text></g><g><title>part2.exe`alloc::vec::impl$12::index(alloc::vec::Vec (2 samples, 0.71%)</title><rect x="85.8156%" y="469" width="0.7092%" height="15" fill="rgb(242,107,0)" fg:x="242" fg:w="2"/><text x="86.0656%" y="479.50"></text></g><g><title>part2.exe`core::slice::index::impl$0::index(ref$&lt;slice2$ (2 samples, 0.71%)</title><rect x="85.8156%" y="453" width="0.7092%" height="15" fill="rgb(251,28,31)" fg:x="242" fg:w="2"/><text x="86.0656%" y="463.50"></text></g><g><title>part2.exe`core::slice::index::impl$2::index(unsigned long long, ref$&lt;slice2$ (2 samples, 0.71%)</title><rect x="85.8156%" y="437" width="0.7092%" height="15" fill="rgb(233,223,10)" fg:x="242" fg:w="2"/><text x="86.0656%" y="447.50"></text></g><g><title>part2.exe`alloc::vec::impl$13::index_mut(alloc::vec::Vec (1 samples, 0.35%)</title><rect x="86.5248%" y="469" width="0.3546%" height="15" fill="rgb(215,21,27)" fg:x="244" fg:w="1"/><text x="86.7748%" y="479.50"></text></g><g><title>part2.exe`core::slice::index::impl$1::index_mut(ref_mut$&lt;slice2$ (1 samples, 0.35%)</title><rect x="86.5248%" y="453" width="0.3546%" height="15" fill="rgb(232,23,21)" fg:x="244" fg:w="1"/><text x="86.7748%" y="463.50"></text></g><g><title>part2.exe`core::slice::index::impl$2::index_mut(unsigned long long, ref_mut$&lt;slice2$ (1 samples, 0.35%)</title><rect x="86.5248%" y="437" width="0.3546%" height="15" fill="rgb(244,5,23)" fg:x="244" fg:w="1"/><text x="86.7748%" y="447.50"></text></g><g><title>part2.exe`day_14::part2::make_cycle(alloc::vec::Vec&lt;alloc::vec::Vec (11 samples, 3.90%)</title><rect x="83.6879%" y="501" width="3.9007%" height="15" fill="rgb(226,81,46)" fg:x="236" fg:w="11"/><text x="83.9379%" y="511.50">part..</text></g><g><title>part2.exe`day_14::part2::move_rocks(alloc::vec::Vec&lt;alloc::vec::Vec (11 samples, 3.90%)</title><rect x="83.6879%" y="485" width="3.9007%" height="15" fill="rgb(247,70,30)" fg:x="236" fg:w="11"/><text x="83.9379%" y="495.50">part..</text></g><g><title>part2.exe`core::iter::range::impl$6::next(core::ops::range::Range (2 samples, 0.71%)</title><rect x="86.8794%" y="469" width="0.7092%" height="15" fill="rgb(212,68,19)" fg:x="245" fg:w="2"/><text x="87.1294%" y="479.50"></text></g><g><title>part2.exe`core::iter::range::impl$5::spec_next(core::ops::range::Range (2 samples, 0.71%)</title><rect x="86.8794%" y="453" width="0.7092%" height="15" fill="rgb(240,187,13)" fg:x="245" fg:w="2"/><text x="87.1294%" y="463.50"></text></g><g><title>part2.exe`core::cmp::impls::impl$54::lt (1 samples, 0.35%)</title><rect x="87.2340%" y="437" width="0.3546%" height="15" fill="rgb(223,113,26)" fg:x="246" fg:w="1"/><text x="87.4840%" y="447.50"></text></g><g><title>part2.exe`day_14::part2::parse_input(ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="501" width="0.3546%" height="15" fill="rgb(206,192,2)" fg:x="247" fg:w="1"/><text x="87.8387%" y="511.50"></text></g><g><title>part2.exe`nom::multi::separated_list1::closure$0(nom::multi::separated_list1::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$&lt;str$&gt; &gt;,nom::bytes::complete::is_a::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$&lt;str$&gt; &gt; &gt;,enum2$&lt;core::result::Result&lt;tuple$&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt; &gt;,enum2$&lt;nom::internal::Err&lt;nom::error::Error&lt;ref$&lt;str$&gt; &gt; &gt; &gt; &gt; &gt; (*)(ref$&lt;str$&gt;)&gt;*, ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="485" width="0.3546%" height="15" fill="rgb(241,108,4)" fg:x="247" fg:w="1"/><text x="87.8387%" y="495.50"></text></g><g><title>part2.exe`nom::internal::impl$12::parse&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$&lt;str$&gt; &gt;,nom::bytes::complete::is_a::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$&lt;str$&gt; &gt; &gt; &gt;(nom::bytes::complete::is_a::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$&lt;str$&gt; &gt; &gt;*, ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="469" width="0.3546%" height="15" fill="rgb(247,173,49)" fg:x="247" fg:w="1"/><text x="87.8387%" y="479.50"></text></g><g><title>part2.exe`nom::bytes::complete::is_a::closure$0(nom::bytes::complete::is_a::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$&lt;str$&gt; &gt; &gt;*, ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="453" width="0.3546%" height="15" fill="rgb(224,114,35)" fg:x="247" fg:w="1"/><text x="87.8387%" y="463.50"></text></g><g><title>part2.exe`nom::traits::impl$21::split_at_position1_complete(ref$&lt;str$&gt;*, nom::bytes::complete::is_a::closure$0::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="437" width="0.3546%" height="15" fill="rgb(245,159,27)" fg:x="247" fg:w="1"/><text x="87.8387%" y="447.50"></text></g><g><title>part2.exe`core::str::impl$0::find(ref$&lt;str$&gt;, nom::bytes::complete::is_a::closure$0::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="421" width="0.3546%" height="15" fill="rgb(245,172,44)" fg:x="247" fg:w="1"/><text x="87.8387%" y="431.50"></text></g><g><title>part2.exe`core::str::pattern::impl$25::next_match(core::str::pattern::CharPredicateSearcher&lt;nom::bytes::complete::is_a::closure$0::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="405" width="0.3546%" height="15" fill="rgb(236,23,11)" fg:x="247" fg:w="1"/><text x="87.8387%" y="415.50"></text></g><g><title>part2.exe`core::str::pattern::Searcher::next_match(core::str::pattern::MultiCharEqSearcher&lt;nom::bytes::complete::is_a::closure$0::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="389" width="0.3546%" height="15" fill="rgb(205,117,38)" fg:x="247" fg:w="1"/><text x="87.8387%" y="399.50"></text></g><g><title>part2.exe`core::str::pattern::impl$9::next(core::str::pattern::MultiCharEqSearcher&lt;nom::bytes::complete::is_a::closure$0::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="373" width="0.3546%" height="15" fill="rgb(237,72,25)" fg:x="247" fg:w="1"/><text x="87.8387%" y="383.50"></text></g><g><title>part2.exe`core::str::pattern::impl$4::matches(nom::bytes::complete::is_a::closure$0::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="357" width="0.3546%" height="15" fill="rgb(244,70,9)" fg:x="247" fg:w="1"/><text x="87.8387%" y="367.50"></text></g><g><title>part2.exe`nom::bytes::complete::is_a::closure$0::closure$0(nom::bytes::complete::is_a::closure$0::closure_env$0&lt;ref$&lt;str$&gt;,ref$&lt;str$&gt;,nom::error::Error&lt;ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="341" width="0.3546%" height="15" fill="rgb(217,125,39)" fg:x="247" fg:w="1"/><text x="87.8387%" y="351.50"></text></g><g><title>part2.exe`nom::traits::impl$32::find_token(ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="325" width="0.3546%" height="15" fill="rgb(235,36,10)" fg:x="247" fg:w="1"/><text x="87.8387%" y="335.50"></text></g><g><title>part2.exe`core::str::impl$0::chars(ref$ (1 samples, 0.35%)</title><rect x="87.5887%" y="309" width="0.3546%" height="15" fill="rgb(251,123,47)" fg:x="247" fg:w="1"/><text x="87.8387%" y="319.50"></text></g><g><title>part2.exe`core::iter::traits::iterator::Iterator::try_fold(core::str::iter::Chars*, tuple$&lt;&gt;, core::iter::traits::iterator::Iterator::any::check::closure_env$0 (1 samples, 0.35%)</title><rect x="87.5887%" y="293" width="0.3546%" height="15" fill="rgb(221,13,13)" fg:x="247" fg:w="1"/><text x="87.8387%" y="303.50"></text></g><g><title>part2.exe`core::str::iter::impl$0::next (1 samples, 0.35%)</title><rect x="87.5887%" y="277" width="0.3546%" height="15" fill="rgb(238,131,9)" fg:x="247" fg:w="1"/><text x="87.8387%" y="287.50"></text></g><g><title>part2.exe`core::str::validations::next_code_point(core::slice::iter::Iter (1 samples, 0.35%)</title><rect x="87.5887%" y="261" width="0.3546%" height="15" fill="rgb(211,50,8)" fg:x="247" fg:w="1"/><text x="87.8387%" y="271.50"></text></g><g><title>part2.exe`core::intrinsics::copy_nonoverlapping (1 samples, 0.35%)</title><rect x="87.9433%" y="405" width="0.3546%" height="15" fill="rgb(245,182,24)" fg:x="248" fg:w="1"/><text x="88.1933%" y="415.50"></text></g><g><title>`0x7FFC2B5114FC (1 samples, 0.35%)</title><rect x="87.9433%" y="389" width="0.3546%" height="15" fill="rgb(242,14,37)" fg:x="248" fg:w="1"/><text x="88.1933%" y="399.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;array$&lt;u64,157&gt;,u32&gt;,alloc::alloc::Global&gt;::find_or_find_insert_slot(unsigned long long, hashbrown::map::equivalent_key::closure_env$0&lt;array$&lt;u64,157&gt;,array$&lt;u64,157&gt;,u32&gt;, hashbrown::map::make_hasher::closure_env$0&lt;array$ (2 samples, 0.71%)</title><rect x="87.9433%" y="485" width="0.7092%" height="15" fill="rgb(246,228,12)" fg:x="248" fg:w="2"/><text x="88.1933%" y="495.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;array$&lt;u64,157&gt;,u32&gt;,alloc::alloc::Global&gt;::reserve(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;array$ (2 samples, 0.71%)</title><rect x="87.9433%" y="469" width="0.7092%" height="15" fill="rgb(213,55,15)" fg:x="248" fg:w="2"/><text x="88.1933%" y="479.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;array$&lt;u64,157&gt;,u32&gt;,alloc::alloc::Global&gt;::reserve_rehash&lt;tuple$&lt;array$&lt;u64,157&gt;,u32&gt;,alloc::alloc::Global,hashbrown::map::make_hasher::closure_env$0&lt;array$&lt;u64,157&gt;,u32,std::hash::random::RandomState&gt; &gt;(unsigned long long, hashbrown::map::make_hasher::closure_env$0&lt;array$ (2 samples, 0.71%)</title><rect x="87.9433%" y="453" width="0.7092%" height="15" fill="rgb(209,9,3)" fg:x="248" fg:w="2"/><text x="88.1933%" y="463.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner::reserve_rehash_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$&lt;Output,u64&gt; &gt; &gt; &gt;, hashbrown::raw::Fallibility, hashbrown::raw::TableLayout, enum2$&lt;core::option::Option&lt;void (*)(ptr_mut$ (2 samples, 0.71%)</title><rect x="87.9433%" y="437" width="0.7092%" height="15" fill="rgb(230,59,30)" fg:x="248" fg:w="2"/><text x="88.1933%" y="447.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner::resize_inner(alloc::alloc::Global*, unsigned long long, ref$&lt;dyn$&lt;core::ops::function::Fn&lt;tuple$&lt;ref_mut$&lt;hashbrown::raw::RawTableInner&gt;,usize&gt;,assoc$ (2 samples, 0.71%)</title><rect x="87.9433%" y="421" width="0.7092%" height="15" fill="rgb(209,121,21)" fg:x="248" fg:w="2"/><text x="88.1933%" y="431.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner::prepare_insert_slot (1 samples, 0.35%)</title><rect x="88.2979%" y="405" width="0.3546%" height="15" fill="rgb(220,109,13)" fg:x="249" fg:w="1"/><text x="88.5479%" y="415.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner::find_insert_slot (1 samples, 0.35%)</title><rect x="88.2979%" y="389" width="0.3546%" height="15" fill="rgb(232,18,1)" fg:x="249" fg:w="1"/><text x="88.5479%" y="399.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTableInner::probe_seq (1 samples, 0.35%)</title><rect x="88.2979%" y="373" width="0.3546%" height="15" fill="rgb(215,41,42)" fg:x="249" fg:w="1"/><text x="88.5479%" y="383.50"></text></g><g><title>part2.exe`core::hash::BuildHasher::hash_one&lt;std::hash::random::RandomState,ref$&lt;array$&lt;u64,157&gt; &gt; &gt; (1 samples, 0.35%)</title><rect x="88.2979%" y="357" width="0.3546%" height="15" fill="rgb(224,123,36)" fg:x="249" fg:w="1"/><text x="88.5479%" y="367.50"></text></g><g><title>part2.exe`std::hash::random::impl$4::finish (1 samples, 0.35%)</title><rect x="88.2979%" y="341" width="0.3546%" height="15" fill="rgb(240,125,3)" fg:x="249" fg:w="1"/><text x="88.5479%" y="351.50"></text></g><g><title>part2.exe`core::hash::sip::impl$4::finish (1 samples, 0.35%)</title><rect x="88.2979%" y="325" width="0.3546%" height="15" fill="rgb(205,98,50)" fg:x="249" fg:w="1"/><text x="88.5479%" y="335.50"></text></g><g><title>part2.exe`core::hash::sip::impl$5::finish(core::hash::sip::Hasher (1 samples, 0.35%)</title><rect x="88.2979%" y="309" width="0.3546%" height="15" fill="rgb(205,185,37)" fg:x="249" fg:w="1"/><text x="88.5479%" y="319.50"></text></g><g><title>part2.exe`std::hash::random::impl$4::write(std::hash::random::DefaultHasher*, ref$&lt;slice2$ (1 samples, 0.35%)</title><rect x="88.2979%" y="293" width="0.3546%" height="15" fill="rgb(238,207,15)" fg:x="249" fg:w="1"/><text x="88.5479%" y="303.50"></text></g><g><title>part2.exe`core::hash::sip::impl$4::write(core::hash::sip::SipHasher13*, ref$&lt;slice2$ (1 samples, 0.35%)</title><rect x="88.2979%" y="277" width="0.3546%" height="15" fill="rgb(213,199,42)" fg:x="249" fg:w="1"/><text x="88.5479%" y="287.50"></text></g><g><title>part2.exe`core::hash::sip::impl$5::write(core::hash::sip::Hasher&lt;core::hash::sip::Sip13Rounds&gt;*, ref$&lt;slice2$ (1 samples, 0.35%)</title><rect x="88.2979%" y="261" width="0.3546%" height="15" fill="rgb(235,201,11)" fg:x="249" fg:w="1"/><text x="88.5479%" y="271.50"></text></g><g><title>part2.exe`core::hash::sip::impl$8::c_rounds (1 samples, 0.35%)</title><rect x="88.2979%" y="245" width="0.3546%" height="15" fill="rgb(207,46,11)" fg:x="249" fg:w="1"/><text x="88.5479%" y="255.50"></text></g><g><title>part2.exe`core::num::impl$9::wrapping_add (1 samples, 0.35%)</title><rect x="88.2979%" y="229" width="0.3546%" height="15" fill="rgb(241,35,35)" fg:x="249" fg:w="1"/><text x="88.5479%" y="239.50"></text></g><g><title>part2.exe`miette::eyreish::context::impl$0::context(enum2$&lt;core::result::Result&lt;alloc::string::String,enum2$&lt;day_14::custom_error::AocError&gt; &gt; &gt;, ref$ (236 samples, 83.69%)</title><rect x="5.3191%" y="549" width="83.6879%" height="15" fill="rgb(243,32,47)" fg:x="15" fg:w="236"/><text x="5.5691%" y="559.50">part2.exe`miette::eyreish::context::impl$0::context(enum2$&lt;core::result::Result&lt;alloc::string::String,enum2$&lt;day_14::custom_error::AocError..</text></g><g><title>part2.exe`miette::eyreish::context::impl$0::wrap_err(enum2$&lt;core::result::Result&lt;alloc::string::String,enum2$&lt;day_14::custom_error::AocError&gt; &gt; &gt;, ref$ (236 samples, 83.69%)</title><rect x="5.3191%" y="533" width="83.6879%" height="15" fill="rgb(247,202,23)" fg:x="15" fg:w="236"/><text x="5.5691%" y="543.50">part2.exe`miette::eyreish::context::impl$0::wrap_err(enum2$&lt;core::result::Result&lt;alloc::string::String,enum2$&lt;day_14::custom_error::AocErro..</text></g><g><title>part2.exe`day_14::part2::process(ref$ (236 samples, 83.69%)</title><rect x="5.3191%" y="517" width="83.6879%" height="15" fill="rgb(219,102,11)" fg:x="15" fg:w="236"/><text x="5.5691%" y="527.50">part2.exe`day_14::part2::process(ref$</text></g><g><title>part2.exe`hashbrown::map::HashMap&lt;array$&lt;u64,157&gt;,u32,std::hash::random::RandomState,alloc::alloc::Global&gt;::insert&lt;array$&lt;u64,157&gt;,u32,std::hash::random::RandomState,alloc::alloc::Global&gt; (3 samples, 1.06%)</title><rect x="87.9433%" y="501" width="1.0638%" height="15" fill="rgb(243,110,44)" fg:x="248" fg:w="3"/><text x="88.1933%" y="511.50"></text></g><g><title>part2.exe`hashbrown::raw::RawTable&lt;tuple$&lt;array$&lt;u64,157&gt;,u32&gt;,alloc::alloc::Global&gt;::insert_in_slot(unsigned long long, hashbrown::raw::InsertSlot, tuple$&lt;array$ (1 samples, 0.35%)</title><rect x="88.6525%" y="485" width="0.3546%" height="15" fill="rgb(222,74,54)" fg:x="250" fg:w="1"/><text x="88.9025%" y="495.50"></text></g><g><title>part2.exe`hashbrown::raw::Bucket&lt;tuple$&lt;array$&lt;u64,157&gt;,u32&gt; &gt;::write(tuple$&lt;array$ (1 samples, 0.35%)</title><rect x="88.6525%" y="469" width="0.3546%" height="15" fill="rgb(216,99,12)" fg:x="250" fg:w="1"/><text x="88.9025%" y="479.50"></text></g><g><title>part2.exe`hashbrown::raw::Bucket&lt;tuple$&lt;array$&lt;u64,157&gt;,u32&gt; &gt;::as_ptr (1 samples, 0.35%)</title><rect x="88.6525%" y="453" width="0.3546%" height="15" fill="rgb(226,22,26)" fg:x="250" fg:w="1"/><text x="88.9025%" y="463.50"></text></g><g><title>part2.exe`core::ptr::write(tuple$&lt;array$&lt;u64,157&gt;,u32&gt;*, tuple$&lt;array$ (1 samples, 0.35%)</title><rect x="88.6525%" y="437" width="0.3546%" height="15" fill="rgb(217,163,10)" fg:x="250" fg:w="1"/><text x="88.9025%" y="447.50"></text></g><g><title>`0x7FFC2B5114F3 (1 samples, 0.35%)</title><rect x="88.6525%" y="421" width="0.3546%" height="15" fill="rgb(213,25,53)" fg:x="250" fg:w="1"/><text x="88.9025%" y="431.50"></text></g><g><title>`0x7FFC3BE7189E (1 samples, 0.35%)</title><rect x="89.0071%" y="277" width="0.3546%" height="15" fill="rgb(252,105,26)" fg:x="251" fg:w="1"/><text x="89.2571%" y="287.50"></text></g><g><title>`0x7FFC3BE73E20 (1 samples, 0.35%)</title><rect x="89.0071%" y="261" width="0.3546%" height="15" fill="rgb(220,39,43)" fg:x="251" fg:w="1"/><text x="89.2571%" y="271.50"></text></g><g><title>`0x7FFC3BE762C9 (1 samples, 0.35%)</title><rect x="89.0071%" y="245" width="0.3546%" height="15" fill="rgb(229,68,48)" fg:x="251" fg:w="1"/><text x="89.2571%" y="255.50"></text></g><g><title>`0x7FFC3BE76413 (1 samples, 0.35%)</title><rect x="89.0071%" y="229" width="0.3546%" height="15" fill="rgb(252,8,32)" fg:x="251" fg:w="1"/><text x="89.2571%" y="239.50"></text></g><g><title>`0x7FFC3F20F454 (1 samples, 0.35%)</title><rect x="89.0071%" y="213" width="0.3546%" height="15" fill="rgb(223,20,43)" fg:x="251" fg:w="1"/><text x="89.2571%" y="223.50"></text></g><g><title>`0x7FFC3BE77883 (1 samples, 0.35%)</title><rect x="89.3617%" y="245" width="0.3546%" height="15" fill="rgb(229,81,49)" fg:x="252" fg:w="1"/><text x="89.6117%" y="255.50"></text></g><g><title>`0x7FFC3BE77CB6 (1 samples, 0.35%)</title><rect x="89.3617%" y="229" width="0.3546%" height="15" fill="rgb(236,28,36)" fg:x="252" fg:w="1"/><text x="89.6117%" y="239.50"></text></g><g><title>`0x7FFC3CB7E947 (1 samples, 0.35%)</title><rect x="89.3617%" y="213" width="0.3546%" height="15" fill="rgb(249,185,26)" fg:x="252" fg:w="1"/><text x="89.6117%" y="223.50"></text></g><g><title>`0x7FFC3F1CAA58 (253 samples, 89.72%)</title><rect x="0.3546%" y="789" width="89.7163%" height="15" fill="rgb(249,174,33)" fg:x="1" fg:w="253"/><text x="0.6046%" y="799.50">`0x7FFC3F1CAA58</text></g><g><title>`0x7FFC3DDE257D (253 samples, 89.72%)</title><rect x="0.3546%" y="773" width="89.7163%" height="15" fill="rgb(233,201,37)" fg:x="1" fg:w="253"/><text x="0.6046%" y="783.50">`0x7FFC3DDE257D</text></g><g><title>part2.exe`__scrt_common_main_seh() (244 samples, 86.52%)</title><rect x="3.5461%" y="757" width="86.5248%" height="15" fill="rgb(221,78,26)" fg:x="10" fg:w="244"/><text x="3.7961%" y="767.50">part2.exe`__scrt_common_main_seh()</text></g><g><title>part2.exe`invoke_main() (240 samples, 85.11%)</title><rect x="4.9645%" y="741" width="85.1064%" height="15" fill="rgb(250,127,30)" fg:x="14" fg:w="240"/><text x="5.2145%" y="751.50">part2.exe`invoke_main()</text></g><g><title>part2.exe`std::rt::lang_start&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::eyreish::Report&gt; &gt; &gt;(enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::eyreish::Report&gt; &gt; (*) (240 samples, 85.11%)</title><rect x="4.9645%" y="725" width="85.1064%" height="15" fill="rgb(230,49,44)" fg:x="14" fg:w="240"/><text x="5.2145%" y="735.50">part2.exe`std::rt::lang_start&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::eyreish::Report&gt; &gt; &gt;(enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::e..</text></g><g><title>part2.exe`std::rt::lang_start_internal (240 samples, 85.11%)</title><rect x="4.9645%" y="709" width="85.1064%" height="15" fill="rgb(229,67,23)" fg:x="14" fg:w="240"/><text x="5.2145%" y="719.50">part2.exe`std::rt::lang_start_internal</text></g><g><title>part2.exe`std::panic::catch_unwind (240 samples, 85.11%)</title><rect x="4.9645%" y="693" width="85.1064%" height="15" fill="rgb(249,83,47)" fg:x="14" fg:w="240"/><text x="5.2145%" y="703.50">part2.exe`std::panic::catch_unwind</text></g><g><title>part2.exe`std::panicking::try (240 samples, 85.11%)</title><rect x="4.9645%" y="677" width="85.1064%" height="15" fill="rgb(215,43,3)" fg:x="14" fg:w="240"/><text x="5.2145%" y="687.50">part2.exe`std::panicking::try</text></g><g><title>part2.exe`std::panicking::try::do_call (240 samples, 85.11%)</title><rect x="4.9645%" y="661" width="85.1064%" height="15" fill="rgb(238,154,13)" fg:x="14" fg:w="240"/><text x="5.2145%" y="671.50">part2.exe`std::panicking::try::do_call</text></g><g><title>part2.exe`std::rt::lang_start_internal::closure$2 (239 samples, 84.75%)</title><rect x="5.3191%" y="645" width="84.7518%" height="15" fill="rgb(219,56,2)" fg:x="15" fg:w="239"/><text x="5.5691%" y="655.50">part2.exe`std::rt::lang_start_internal::closure$2</text></g><g><title>part2.exe`std::panic::catch_unwind (239 samples, 84.75%)</title><rect x="5.3191%" y="629" width="84.7518%" height="15" fill="rgb(233,0,4)" fg:x="15" fg:w="239"/><text x="5.5691%" y="639.50">part2.exe`std::panic::catch_unwind</text></g><g><title>part2.exe`std::rt::lang_start::closure$0&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::eyreish::Report&gt; &gt; &gt;(std::rt::lang_start::closure_env$0&lt;enum2$&lt;core::result::Result&lt;tuple$ (239 samples, 84.75%)</title><rect x="5.3191%" y="613" width="84.7518%" height="15" fill="rgb(235,30,7)" fg:x="15" fg:w="239"/><text x="5.5691%" y="623.50">part2.exe`std::rt::lang_start::closure$0&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::eyreish::Report&gt; &gt; &gt;(std::rt::lang_start::closure_env$0..</text></g><g><title>part2.exe`std::process::impl$61::report(enum2$&lt;core::result::Result&lt;tuple$ (239 samples, 84.75%)</title><rect x="5.3191%" y="597" width="84.7518%" height="15" fill="rgb(250,79,13)" fg:x="15" fg:w="239"/><text x="5.5691%" y="607.50">part2.exe`std::process::impl$61::report(enum2$&lt;core::result::Result&lt;tuple$</text></g><g><title>part2.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::eyreish::Report&gt; &gt; (*)(),enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::eyreish::Report&gt; &gt; &gt;(enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::eyreish::Report&gt; &gt; (*) (239 samples, 84.75%)</title><rect x="5.3191%" y="581" width="84.7518%" height="15" fill="rgb(211,146,34)" fg:x="15" fg:w="239"/><text x="5.5691%" y="591.50">part2.exe`std::sys_common::backtrace::__rust_begin_short_backtrace&lt;enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,miette::eyreish::Report&gt; &gt; (*)(),enum..</text></g><g><title>part2.exe`part2::main (239 samples, 84.75%)</title><rect x="5.3191%" y="565" width="84.7518%" height="15" fill="rgb(228,22,38)" fg:x="15" fg:w="239"/><text x="5.5691%" y="575.50">part2.exe`part2::main</text></g><g><title>part2.exe`tracing_subscriber::fmt::init (3 samples, 1.06%)</title><rect x="89.0071%" y="549" width="1.0638%" height="15" fill="rgb(235,168,5)" fg:x="251" fg:w="3"/><text x="89.2571%" y="559.50"></text></g><g><title>part2.exe`enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error,core::marker::Send,core::marker::Sync&gt;,alloc::alloc::Global&gt; &gt; &gt;::expect(enum2$&lt;core::result::Result&lt;tuple$&lt;&gt;,alloc::boxed::Box&lt;dyn$&lt;core::error::Error,core::marker::Send,core::marker::Sync&gt;,alloc::alloc::Global&gt; &gt; &gt;, ref$ (3 samples, 1.06%)</title><rect x="89.0071%" y="533" width="1.0638%" height="15" fill="rgb(221,155,16)" fg:x="251" fg:w="3"/><text x="89.2571%" y="543.50"></text></g><g><title>part2.exe`tracing_subscriber::fmt::try_init (3 samples, 1.06%)</title><rect x="89.0071%" y="517" width="1.0638%" height="15" fill="rgb(215,215,53)" fg:x="251" fg:w="3"/><text x="89.2571%" y="527.50"></text></g><g><title>part2.exe`tracing_subscriber::filter::env::EnvFilter::from_default_env (3 samples, 1.06%)</title><rect x="89.0071%" y="501" width="1.0638%" height="15" fill="rgb(223,4,10)" fg:x="251" fg:w="3"/><text x="89.2571%" y="511.50"></text></g><g><title>part2.exe`core::ptr::drop_in_place (3 samples, 1.06%)</title><rect x="89.0071%" y="485" width="1.0638%" height="15" fill="rgb(234,103,6)" fg:x="251" fg:w="3"/><text x="89.2571%" y="495.50"></text></g><g><title>part2.exe`core::ptr::drop_in_place(enum2$&lt;core::option::Option (3 samples, 1.06%)</title><rect x="89.0071%" y="469" width="1.0638%" height="15" fill="rgb(227,97,0)" fg:x="251" fg:w="3"/><text x="89.2571%" y="479.50"></text></g><g><title>part2.exe`tracing_subscriber::filter::env::builder::Builder::from_env_lossy (3 samples, 1.06%)</title><rect x="89.0071%" y="453" width="1.0638%" height="15" fill="rgb(234,150,53)" fg:x="251" fg:w="3"/><text x="89.2571%" y="463.50"></text></g><g><title>part2.exe`tracing_subscriber::filter::env::builder::Builder::parse_lossy (3 samples, 1.06%)</title><rect x="89.0071%" y="437" width="1.0638%" height="15" fill="rgb(228,201,54)" fg:x="251" fg:w="3"/><text x="89.2571%" y="447.50"></text></g><g><title>part2.exe`tracing_subscriber::filter::env::builder::Builder::from_directives(core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::filter::Filter&lt;core::str::iter::Split&lt;char&gt;,tracing_subscriber::filter::env::builder::impl$0::parse_lossy::closure_env$0&lt;alloc::string::String&gt; &gt;,tracing_subscriber::filter::env::builder::impl$0::parse_lossy::closure_env$1 (3 samples, 1.06%)</title><rect x="89.0071%" y="421" width="1.0638%" height="15" fill="rgb(222,22,37)" fg:x="251" fg:w="3"/><text x="89.2571%" y="431.50"></text></g><g><title>part2.exe`std::collections::hash::map::impl$8::default (3 samples, 1.06%)</title><rect x="89.0071%" y="405" width="1.0638%" height="15" fill="rgb(237,53,32)" fg:x="251" fg:w="3"/><text x="89.2571%" y="415.50"></text></g><g><title>part2.exe`std::sys::common::thread_local::fast_local::Key&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt;::try_initialize&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt;,std::hash::random::impl$0::new::KEYS::__getit::closure_env$0&gt; (3 samples, 1.06%)</title><rect x="89.0071%" y="389" width="1.0638%" height="15" fill="rgb(233,25,53)" fg:x="251" fg:w="3"/><text x="89.2571%" y="399.50"></text></g><g><title>part2.exe`std::sys::common::thread_local::lazy::LazyKeyInner&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt;::initialize (3 samples, 1.06%)</title><rect x="89.0071%" y="373" width="1.0638%" height="15" fill="rgb(210,40,34)" fg:x="251" fg:w="3"/><text x="89.2571%" y="383.50"></text></g><g><title>part2.exe`core::mem::replace(enum2$&lt;core::option::Option&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;core::cell::Cell&lt;tuple$ (3 samples, 1.06%)</title><rect x="89.0071%" y="357" width="1.0638%" height="15" fill="rgb(241,220,44)" fg:x="251" fg:w="3"/><text x="89.2571%" y="367.50"></text></g><g><title>part2.exe`core::ptr::write(enum2$&lt;core::option::Option&lt;core::cell::Cell&lt;tuple$&lt;u64,u64&gt; &gt; &gt; &gt;*, enum2$&lt;core::option::Option&lt;core::cell::Cell&lt;tuple$ (3 samples, 1.06%)</title><rect x="89.0071%" y="341" width="1.0638%" height="15" fill="rgb(235,28,35)" fg:x="251" fg:w="3"/><text x="89.2571%" y="351.50"></text></g><g><title>part2.exe`std::sys::windows::rand::hashmap_random_keys (3 samples, 1.06%)</title><rect x="89.0071%" y="325" width="1.0638%" height="15" fill="rgb(210,56,17)" fg:x="251" fg:w="3"/><text x="89.2571%" y="335.50"></text></g><g><title>part2.exe`std::sys::windows::c::nt_success (3 samples, 1.06%)</title><rect x="89.0071%" y="309" width="1.0638%" height="15" fill="rgb(224,130,29)" fg:x="251" fg:w="3"/><text x="89.2571%" y="319.50"></text></g><g><title>`0x7FFC3BE7177C (3 samples, 1.06%)</title><rect x="89.0071%" y="293" width="1.0638%" height="15" fill="rgb(235,212,8)" fg:x="251" fg:w="3"/><text x="89.2571%" y="303.50"></text></g><g><title>`0x7FFC3BE718D6 (2 samples, 0.71%)</title><rect x="89.3617%" y="277" width="0.7092%" height="15" fill="rgb(223,33,50)" fg:x="252" fg:w="2"/><text x="89.6117%" y="287.50"></text></g><g><title>`0x7FFC3BE755D3 (2 samples, 0.71%)</title><rect x="89.3617%" y="261" width="0.7092%" height="15" fill="rgb(219,149,13)" fg:x="252" fg:w="2"/><text x="89.6117%" y="271.50"></text></g><g><title>`0x7FFC3BE77969 (1 samples, 0.35%)</title><rect x="89.7163%" y="245" width="0.3546%" height="15" fill="rgb(250,156,29)" fg:x="253" fg:w="1"/><text x="89.9663%" y="255.50"></text></g><g><title>`0x7FFC3BE77E85 (1 samples, 0.35%)</title><rect x="89.7163%" y="229" width="0.3546%" height="15" fill="rgb(216,193,19)" fg:x="253" fg:w="1"/><text x="89.9663%" y="239.50"></text></g><g><title>`0x7FFC3C5C6452 (1 samples, 0.35%)</title><rect x="89.7163%" y="213" width="0.3546%" height="15" fill="rgb(216,135,14)" fg:x="253" fg:w="1"/><text x="89.9663%" y="223.50"></text></g><g><title>`0x7FFC3F19A25A (1 samples, 0.35%)</title><rect x="89.7163%" y="197" width="0.3546%" height="15" fill="rgb(241,47,5)" fg:x="253" fg:w="1"/><text x="89.9663%" y="207.50"></text></g><g><title>`0x7FFC3F188CAC (1 samples, 0.35%)</title><rect x="89.7163%" y="181" width="0.3546%" height="15" fill="rgb(233,42,35)" fg:x="253" fg:w="1"/><text x="89.9663%" y="191.50"></text></g><g><title>`0x7FFC3F1988B6 (1 samples, 0.35%)</title><rect x="89.7163%" y="165" width="0.3546%" height="15" fill="rgb(231,13,6)" fg:x="253" fg:w="1"/><text x="89.9663%" y="175.50"></text></g><g><title>`0x7FFC3F19DDA9 (1 samples, 0.35%)</title><rect x="89.7163%" y="149" width="0.3546%" height="15" fill="rgb(207,181,40)" fg:x="253" fg:w="1"/><text x="89.9663%" y="159.50"></text></g><g><title>`0x7FFC3F19CE29 (1 samples, 0.35%)</title><rect x="89.7163%" y="133" width="0.3546%" height="15" fill="rgb(254,173,49)" fg:x="253" fg:w="1"/><text x="89.9663%" y="143.50"></text></g><g><title>`0x7FFC3F19C399 (1 samples, 0.35%)</title><rect x="89.7163%" y="117" width="0.3546%" height="15" fill="rgb(221,1,38)" fg:x="253" fg:w="1"/><text x="89.9663%" y="127.50"></text></g><g><title>`0x7FFC3F19AFAC (1 samples, 0.35%)</title><rect x="89.7163%" y="101" width="0.3546%" height="15" fill="rgb(206,124,46)" fg:x="253" fg:w="1"/><text x="89.9663%" y="111.50"></text></g><g><title>`0x7FFC3F19BC2F (1 samples, 0.35%)</title><rect x="89.7163%" y="85" width="0.3546%" height="15" fill="rgb(249,21,11)" fg:x="253" fg:w="1"/><text x="89.9663%" y="95.50"></text></g><g><title>`0x7FFC3F1A2944 (1 samples, 0.35%)</title><rect x="89.7163%" y="69" width="0.3546%" height="15" fill="rgb(222,201,40)" fg:x="253" fg:w="1"/><text x="89.9663%" y="79.50"></text></g><g><title>`0x7FFC3F1A28B2 (1 samples, 0.35%)</title><rect x="89.7163%" y="53" width="0.3546%" height="15" fill="rgb(235,61,29)" fg:x="253" fg:w="1"/><text x="89.9663%" y="63.50"></text></g><g><title>`0x7FFC3F20FD74 (1 samples, 0.35%)</title><rect x="89.7163%" y="37" width="0.3546%" height="15" fill="rgb(219,207,3)" fg:x="253" fg:w="1"/><text x="89.9663%" y="47.50"></text></g><g><title>`0x7FFC3F1E3EFD (1 samples, 0.35%)</title><rect x="90.0709%" y="757" width="0.3546%" height="15" fill="rgb(222,56,46)" fg:x="254" fg:w="1"/><text x="90.3209%" y="767.50"></text></g><g><title>`0x7FFC3F24CE0D (1 samples, 0.35%)</title><rect x="90.4255%" y="741" width="0.3546%" height="15" fill="rgb(239,76,54)" fg:x="255" fg:w="1"/><text x="90.6755%" y="751.50"></text></g><g><title>`0x7FFC3F24CCC5 (1 samples, 0.35%)</title><rect x="90.4255%" y="725" width="0.3546%" height="15" fill="rgb(231,124,27)" fg:x="255" fg:w="1"/><text x="90.6755%" y="735.50"></text></g><g><title>`0x7FFC3F21E3E3 (1 samples, 0.35%)</title><rect x="90.4255%" y="709" width="0.3546%" height="15" fill="rgb(249,195,6)" fg:x="255" fg:w="1"/><text x="90.6755%" y="719.50"></text></g><g><title>`0x7FFC3F211364 (1 samples, 0.35%)</title><rect x="90.4255%" y="693" width="0.3546%" height="15" fill="rgb(237,174,47)" fg:x="255" fg:w="1"/><text x="90.6755%" y="703.50"></text></g><g><title>`0x7FFC3F24D582 (1 samples, 0.35%)</title><rect x="90.7801%" y="741" width="0.3546%" height="15" fill="rgb(206,201,31)" fg:x="256" fg:w="1"/><text x="91.0301%" y="751.50"></text></g><g><title>`0x7FFC3F21EB5E (1 samples, 0.35%)</title><rect x="90.7801%" y="725" width="0.3546%" height="15" fill="rgb(231,57,52)" fg:x="256" fg:w="1"/><text x="91.0301%" y="735.50"></text></g><g><title>`0x7FFC3F21F4AF (1 samples, 0.35%)</title><rect x="90.7801%" y="709" width="0.3546%" height="15" fill="rgb(248,177,22)" fg:x="256" fg:w="1"/><text x="91.0301%" y="719.50"></text></g><g><title>`0x7FFC3F20F694 (1 samples, 0.35%)</title><rect x="90.7801%" y="693" width="0.3546%" height="15" fill="rgb(215,211,37)" fg:x="256" fg:w="1"/><text x="91.0301%" y="703.50"></text></g><g><title>`0x7FFC3F24D777 (1 samples, 0.35%)</title><rect x="91.1348%" y="741" width="0.3546%" height="15" fill="rgb(241,128,51)" fg:x="257" fg:w="1"/><text x="91.3848%" y="751.50"></text></g><g><title>`0x7FFC3F1A14E0 (1 samples, 0.35%)</title><rect x="91.1348%" y="725" width="0.3546%" height="15" fill="rgb(227,165,31)" fg:x="257" fg:w="1"/><text x="91.3848%" y="735.50"></text></g><g><title>`0x7FFC3F1A21CA (1 samples, 0.35%)</title><rect x="91.1348%" y="709" width="0.3546%" height="15" fill="rgb(228,167,24)" fg:x="257" fg:w="1"/><text x="91.3848%" y="719.50"></text></g><g><title>`0x7FFC3F1A2057 (1 samples, 0.35%)</title><rect x="91.1348%" y="693" width="0.3546%" height="15" fill="rgb(228,143,12)" fg:x="257" fg:w="1"/><text x="91.3848%" y="703.50"></text></g><g><title>`0x7FFC3F212DC4 (1 samples, 0.35%)</title><rect x="91.1348%" y="677" width="0.3546%" height="15" fill="rgb(249,149,8)" fg:x="257" fg:w="1"/><text x="91.3848%" y="687.50"></text></g><g><title>`0x7FFC3F24DE76 (1 samples, 0.35%)</title><rect x="91.4894%" y="741" width="0.3546%" height="15" fill="rgb(243,35,44)" fg:x="258" fg:w="1"/><text x="91.7394%" y="751.50"></text></g><g><title>`0x7FFC3F1A2944 (1 samples, 0.35%)</title><rect x="91.4894%" y="725" width="0.3546%" height="15" fill="rgb(246,89,9)" fg:x="258" fg:w="1"/><text x="91.7394%" y="735.50"></text></g><g><title>`0x7FFC3F1A28B2 (1 samples, 0.35%)</title><rect x="91.4894%" y="709" width="0.3546%" height="15" fill="rgb(233,213,13)" fg:x="258" fg:w="1"/><text x="91.7394%" y="719.50"></text></g><g><title>`0x7FFC3F19C254 (1 samples, 0.35%)</title><rect x="91.8440%" y="645" width="0.3546%" height="15" fill="rgb(233,141,41)" fg:x="259" fg:w="1"/><text x="92.0940%" y="655.50"></text></g><g><title>`0x7FFC3F19C0CA (1 samples, 0.35%)</title><rect x="91.8440%" y="629" width="0.3546%" height="15" fill="rgb(239,167,4)" fg:x="259" fg:w="1"/><text x="92.0940%" y="639.50"></text></g><g><title>`0x7FFC3F19C4CC (1 samples, 0.35%)</title><rect x="91.8440%" y="613" width="0.3546%" height="15" fill="rgb(209,217,16)" fg:x="259" fg:w="1"/><text x="92.0940%" y="623.50"></text></g><g><title>`0x7FFC3F20F874 (1 samples, 0.35%)</title><rect x="91.8440%" y="597" width="0.3546%" height="15" fill="rgb(219,88,35)" fg:x="259" fg:w="1"/><text x="92.0940%" y="607.50"></text></g><g><title>`0x7FFC3F19467A (1 samples, 0.35%)</title><rect x="92.1986%" y="629" width="0.3546%" height="15" fill="rgb(220,193,23)" fg:x="260" fg:w="1"/><text x="92.4486%" y="639.50"></text></g><g><title>`0x7FFC3F1946BB (1 samples, 0.35%)</title><rect x="92.5532%" y="629" width="0.3546%" height="15" fill="rgb(230,90,52)" fg:x="261" fg:w="1"/><text x="92.8032%" y="639.50"></text></g><g><title>`0x7FFC3F194906 (1 samples, 0.35%)</title><rect x="92.5532%" y="613" width="0.3546%" height="15" fill="rgb(252,106,19)" fg:x="261" fg:w="1"/><text x="92.8032%" y="623.50"></text></g><g><title>`0x7FFC3F1958C4 (1 samples, 0.35%)</title><rect x="92.5532%" y="597" width="0.3546%" height="15" fill="rgb(206,74,20)" fg:x="261" fg:w="1"/><text x="92.8032%" y="607.50"></text></g><g><title>`0x7FFC3F19CE29 (1 samples, 0.35%)</title><rect x="92.5532%" y="581" width="0.3546%" height="15" fill="rgb(230,138,44)" fg:x="261" fg:w="1"/><text x="92.8032%" y="591.50"></text></g><g><title>`0x7FFC3F19C254 (1 samples, 0.35%)</title><rect x="92.5532%" y="565" width="0.3546%" height="15" fill="rgb(235,182,43)" fg:x="261" fg:w="1"/><text x="92.8032%" y="575.50"></text></g><g><title>`0x7FFC3F19C0CA (1 samples, 0.35%)</title><rect x="92.5532%" y="549" width="0.3546%" height="15" fill="rgb(242,16,51)" fg:x="261" fg:w="1"/><text x="92.8032%" y="559.50"></text></g><g><title>`0x7FFC3F19C4CC (1 samples, 0.35%)</title><rect x="92.5532%" y="533" width="0.3546%" height="15" fill="rgb(248,9,4)" fg:x="261" fg:w="1"/><text x="92.8032%" y="543.50"></text></g><g><title>`0x7FFC3F20F874 (1 samples, 0.35%)</title><rect x="92.5532%" y="517" width="0.3546%" height="15" fill="rgb(210,31,22)" fg:x="261" fg:w="1"/><text x="92.8032%" y="527.50"></text></g><g><title>`0x7FFC3F193C66 (2 samples, 0.71%)</title><rect x="92.9078%" y="613" width="0.7092%" height="15" fill="rgb(239,54,39)" fg:x="262" fg:w="2"/><text x="93.1578%" y="623.50"></text></g><g><title>`0x7FFC3F1988B6 (6 samples, 2.13%)</title><rect x="91.8440%" y="693" width="2.1277%" height="15" fill="rgb(230,99,41)" fg:x="259" fg:w="6"/><text x="92.0940%" y="703.50">`..</text></g><g><title>`0x7FFC3F19DDA9 (6 samples, 2.13%)</title><rect x="91.8440%" y="677" width="2.1277%" height="15" fill="rgb(253,106,12)" fg:x="259" fg:w="6"/><text x="92.0940%" y="687.50">`..</text></g><g><title>`0x7FFC3F19CE29 (6 samples, 2.13%)</title><rect x="91.8440%" y="661" width="2.1277%" height="15" fill="rgb(213,46,41)" fg:x="259" fg:w="6"/><text x="92.0940%" y="671.50">`..</text></g><g><title>`0x7FFC3F19C3F8 (5 samples, 1.77%)</title><rect x="92.1986%" y="645" width="1.7730%" height="15" fill="rgb(215,133,35)" fg:x="260" fg:w="5"/><text x="92.4486%" y="655.50">`..</text></g><g><title>`0x7FFC3F194774 (3 samples, 1.06%)</title><rect x="92.9078%" y="629" width="1.0638%" height="15" fill="rgb(213,28,5)" fg:x="262" fg:w="3"/><text x="93.1578%" y="639.50"></text></g><g><title>`0x7FFC3F193C82 (1 samples, 0.35%)</title><rect x="93.6170%" y="613" width="0.3546%" height="15" fill="rgb(215,77,49)" fg:x="264" fg:w="1"/><text x="93.8670%" y="623.50"></text></g><g><title>`0x7FFC3F1BAD9D (1 samples, 0.35%)</title><rect x="93.9716%" y="533" width="0.3546%" height="15" fill="rgb(248,100,22)" fg:x="265" fg:w="1"/><text x="94.2216%" y="543.50"></text></g><g><title>`0x7FFC3F2107A4 (1 samples, 0.35%)</title><rect x="93.9716%" y="517" width="0.3546%" height="15" fill="rgb(208,67,9)" fg:x="265" fg:w="1"/><text x="94.2216%" y="527.50"></text></g><g><title>`0x7FFC3C5DCA03 (2 samples, 0.71%)</title><rect x="93.9716%" y="581" width="0.7092%" height="15" fill="rgb(219,133,21)" fg:x="265" fg:w="2"/><text x="94.2216%" y="591.50"></text></g><g><title>`0x7FFC3C5DC322 (2 samples, 0.71%)</title><rect x="93.9716%" y="565" width="0.7092%" height="15" fill="rgb(246,46,29)" fg:x="265" fg:w="2"/><text x="94.2216%" y="575.50"></text></g><g><title>`0x7FFC3F1BAFE2 (2 samples, 0.71%)</title><rect x="93.9716%" y="549" width="0.7092%" height="15" fill="rgb(246,185,52)" fg:x="265" fg:w="2"/><text x="94.2216%" y="559.50"></text></g><g><title>`0x7FFC3F1BAE01 (1 samples, 0.35%)</title><rect x="94.3262%" y="533" width="0.3546%" height="15" fill="rgb(252,136,11)" fg:x="266" fg:w="1"/><text x="94.5762%" y="543.50"></text></g><g><title>`0x7FFC3F20F874 (1 samples, 0.35%)</title><rect x="94.3262%" y="517" width="0.3546%" height="15" fill="rgb(219,138,53)" fg:x="266" fg:w="1"/><text x="94.5762%" y="527.50"></text></g><g><title>`0x7FFC3C5DC68D (3 samples, 1.06%)</title><rect x="93.9716%" y="597" width="1.0638%" height="15" fill="rgb(211,51,23)" fg:x="265" fg:w="3"/><text x="94.2216%" y="607.50"></text></g><g><title>`0x7FFC3C5DCD26 (1 samples, 0.35%)</title><rect x="94.6809%" y="581" width="0.3546%" height="15" fill="rgb(247,221,28)" fg:x="267" fg:w="1"/><text x="94.9309%" y="591.50"></text></g><g><title>`0x7FFC3C61767E (1 samples, 0.35%)</title><rect x="94.6809%" y="565" width="0.3546%" height="15" fill="rgb(251,222,45)" fg:x="267" fg:w="1"/><text x="94.9309%" y="575.50"></text></g><g><title>`0x7FFC3C5DC3DA (1 samples, 0.35%)</title><rect x="94.6809%" y="549" width="0.3546%" height="15" fill="rgb(217,162,53)" fg:x="267" fg:w="1"/><text x="94.9309%" y="559.50"></text></g><g><title>`0x7FFC3F2006C1 (1 samples, 0.35%)</title><rect x="94.6809%" y="533" width="0.3546%" height="15" fill="rgb(229,93,14)" fg:x="267" fg:w="1"/><text x="94.9309%" y="543.50"></text></g><g><title>`0x7FFC3F200738 (1 samples, 0.35%)</title><rect x="94.6809%" y="517" width="0.3546%" height="15" fill="rgb(209,67,49)" fg:x="267" fg:w="1"/><text x="94.9309%" y="527.50"></text></g><g><title>`0x7FFC3F206246 (1 samples, 0.35%)</title><rect x="94.6809%" y="501" width="0.3546%" height="15" fill="rgb(213,87,29)" fg:x="267" fg:w="1"/><text x="94.9309%" y="511.50"></text></g><g><title>`0x7FFC3F24E5BF (10 samples, 3.55%)</title><rect x="91.8440%" y="741" width="3.5461%" height="15" fill="rgb(205,151,52)" fg:x="259" fg:w="10"/><text x="92.0940%" y="751.50">`0x7..</text></g><g><title>`0x7FFC3F19A25A (10 samples, 3.55%)</title><rect x="91.8440%" y="725" width="3.5461%" height="15" fill="rgb(253,215,39)" fg:x="259" fg:w="10"/><text x="92.0940%" y="735.50">`0x7..</text></g><g><title>`0x7FFC3F188CAC (10 samples, 3.55%)</title><rect x="91.8440%" y="709" width="3.5461%" height="15" fill="rgb(221,220,41)" fg:x="259" fg:w="10"/><text x="92.0940%" y="719.50">`0x7..</text></g><g><title>`0x7FFC3F198940 (4 samples, 1.42%)</title><rect x="93.9716%" y="693" width="1.4184%" height="15" fill="rgb(218,133,21)" fg:x="265" fg:w="4"/><text x="94.2216%" y="703.50"></text></g><g><title>`0x7FFC3F19D62D (4 samples, 1.42%)</title><rect x="93.9716%" y="677" width="1.4184%" height="15" fill="rgb(221,193,43)" fg:x="265" fg:w="4"/><text x="94.2216%" y="687.50"></text></g><g><title>`0x7FFC3F1DCE70 (4 samples, 1.42%)</title><rect x="93.9716%" y="661" width="1.4184%" height="15" fill="rgb(240,128,52)" fg:x="265" fg:w="4"/><text x="94.2216%" y="671.50"></text></g><g><title>`0x7FFC3F1DCDFE (4 samples, 1.42%)</title><rect x="93.9716%" y="645" width="1.4184%" height="15" fill="rgb(253,114,12)" fg:x="265" fg:w="4"/><text x="94.2216%" y="655.50"></text></g><g><title>`0x7FFC3F1DD04D (4 samples, 1.42%)</title><rect x="93.9716%" y="629" width="1.4184%" height="15" fill="rgb(215,223,47)" fg:x="265" fg:w="4"/><text x="94.2216%" y="639.50"></text></g><g><title>`0x7FFC3F19869F (4 samples, 1.42%)</title><rect x="93.9716%" y="613" width="1.4184%" height="15" fill="rgb(248,225,23)" fg:x="265" fg:w="4"/><text x="94.2216%" y="623.50"></text></g><g><title>`0x7FFC3C5DC76D (1 samples, 0.35%)</title><rect x="95.0355%" y="597" width="0.3546%" height="15" fill="rgb(250,108,0)" fg:x="268" fg:w="1"/><text x="95.2855%" y="607.50"></text></g><g><title>`0x7FFC3C5DCF08 (1 samples, 0.35%)</title><rect x="95.0355%" y="581" width="0.3546%" height="15" fill="rgb(228,208,7)" fg:x="268" fg:w="1"/><text x="95.2855%" y="591.50"></text></g><g><title>`0x7FFC3C5DCFBF (1 samples, 0.35%)</title><rect x="95.0355%" y="565" width="0.3546%" height="15" fill="rgb(244,45,10)" fg:x="268" fg:w="1"/><text x="95.2855%" y="575.50"></text></g><g><title>`0x7FFC3C5DD0DE (1 samples, 0.35%)</title><rect x="95.0355%" y="549" width="0.3546%" height="15" fill="rgb(207,125,25)" fg:x="268" fg:w="1"/><text x="95.2855%" y="559.50"></text></g><g><title>`0x7FFC3C5DDB0E (1 samples, 0.35%)</title><rect x="95.0355%" y="533" width="0.3546%" height="15" fill="rgb(210,195,18)" fg:x="268" fg:w="1"/><text x="95.2855%" y="543.50"></text></g><g><title>`0x7FFC3C5DEAD4 (1 samples, 0.35%)</title><rect x="95.0355%" y="517" width="0.3546%" height="15" fill="rgb(249,80,12)" fg:x="268" fg:w="1"/><text x="95.2855%" y="527.50"></text></g><g><title>`0x7FFC3C5DE5B7 (1 samples, 0.35%)</title><rect x="95.0355%" y="501" width="0.3546%" height="15" fill="rgb(221,65,9)" fg:x="268" fg:w="1"/><text x="95.2855%" y="511.50"></text></g><g><title>`0x7FFC3F17B146 (1 samples, 0.35%)</title><rect x="95.0355%" y="485" width="0.3546%" height="15" fill="rgb(235,49,36)" fg:x="268" fg:w="1"/><text x="95.2855%" y="495.50"></text></g><g><title>`0x7FFC3F20F5B4 (1 samples, 0.35%)</title><rect x="95.0355%" y="469" width="0.3546%" height="15" fill="rgb(225,32,20)" fg:x="268" fg:w="1"/><text x="95.2855%" y="479.50"></text></g><g><title>`0x7FFC3F24E669 (1 samples, 0.35%)</title><rect x="95.3901%" y="741" width="0.3546%" height="15" fill="rgb(215,141,46)" fg:x="269" fg:w="1"/><text x="95.6401%" y="751.50"></text></g><g><title>`0x7FFC3F1885A2 (1 samples, 0.35%)</title><rect x="95.3901%" y="725" width="0.3546%" height="15" fill="rgb(250,160,47)" fg:x="269" fg:w="1"/><text x="95.6401%" y="735.50"></text></g><g><title>`0x7FFC3F24E889 (1 samples, 0.35%)</title><rect x="95.7447%" y="741" width="0.3546%" height="15" fill="rgb(216,222,40)" fg:x="270" fg:w="1"/><text x="95.9947%" y="751.50"></text></g><g><title>`0x7FFC3F1BB10D (1 samples, 0.35%)</title><rect x="95.7447%" y="725" width="0.3546%" height="15" fill="rgb(234,217,39)" fg:x="270" fg:w="1"/><text x="95.9947%" y="735.50"></text></g><g><title>`0x7FFC3F1BBD90 (1 samples, 0.35%)</title><rect x="95.7447%" y="709" width="0.3546%" height="15" fill="rgb(207,178,40)" fg:x="270" fg:w="1"/><text x="95.9947%" y="719.50"></text></g><g><title>`0x7FFC3F210DC4 (1 samples, 0.35%)</title><rect x="95.7447%" y="693" width="0.3546%" height="15" fill="rgb(221,136,13)" fg:x="270" fg:w="1"/><text x="95.9947%" y="703.50"></text></g><g><title>`0x7FFC3F19C399 (1 samples, 0.35%)</title><rect x="96.0993%" y="661" width="0.3546%" height="15" fill="rgb(249,199,10)" fg:x="271" fg:w="1"/><text x="96.3493%" y="671.50"></text></g><g><title>`0x7FFC3F19AF46 (1 samples, 0.35%)</title><rect x="96.0993%" y="645" width="0.3546%" height="15" fill="rgb(249,222,13)" fg:x="271" fg:w="1"/><text x="96.3493%" y="655.50"></text></g><g><title>`0x7FFC3F19B1A3 (1 samples, 0.35%)</title><rect x="96.0993%" y="629" width="0.3546%" height="15" fill="rgb(244,185,38)" fg:x="271" fg:w="1"/><text x="96.3493%" y="639.50"></text></g><g><title>`0x7FFC3F19C254 (2 samples, 0.71%)</title><rect x="96.4539%" y="581" width="0.7092%" height="15" fill="rgb(236,202,9)" fg:x="272" fg:w="2"/><text x="96.7039%" y="591.50"></text></g><g><title>`0x7FFC3F19C0CA (2 samples, 0.71%)</title><rect x="96.4539%" y="565" width="0.7092%" height="15" fill="rgb(250,229,37)" fg:x="272" fg:w="2"/><text x="96.7039%" y="575.50"></text></g><g><title>`0x7FFC3F19C4CC (2 samples, 0.71%)</title><rect x="96.4539%" y="549" width="0.7092%" height="15" fill="rgb(206,174,23)" fg:x="272" fg:w="2"/><text x="96.7039%" y="559.50"></text></g><g><title>`0x7FFC3F20F874 (2 samples, 0.71%)</title><rect x="96.4539%" y="533" width="0.7092%" height="15" fill="rgb(211,33,43)" fg:x="272" fg:w="2"/><text x="96.7039%" y="543.50"></text></g><g><title>`0x7FFC3F1946BB (3 samples, 1.06%)</title><rect x="96.4539%" y="645" width="1.0638%" height="15" fill="rgb(245,58,50)" fg:x="272" fg:w="3"/><text x="96.7039%" y="655.50"></text></g><g><title>`0x7FFC3F194906 (3 samples, 1.06%)</title><rect x="96.4539%" y="629" width="1.0638%" height="15" fill="rgb(244,68,36)" fg:x="272" fg:w="3"/><text x="96.7039%" y="639.50"></text></g><g><title>`0x7FFC3F1958C4 (3 samples, 1.06%)</title><rect x="96.4539%" y="613" width="1.0638%" height="15" fill="rgb(232,229,15)" fg:x="272" fg:w="3"/><text x="96.7039%" y="623.50"></text></g><g><title>`0x7FFC3F19CE29 (3 samples, 1.06%)</title><rect x="96.4539%" y="597" width="1.0638%" height="15" fill="rgb(254,30,23)" fg:x="272" fg:w="3"/><text x="96.7039%" y="607.50"></text></g><g><title>`0x7FFC3F19C3F8 (1 samples, 0.35%)</title><rect x="97.1631%" y="581" width="0.3546%" height="15" fill="rgb(235,160,14)" fg:x="274" fg:w="1"/><text x="97.4131%" y="591.50"></text></g><g><title>`0x7FFC3F1945A0 (1 samples, 0.35%)</title><rect x="97.1631%" y="565" width="0.3546%" height="15" fill="rgb(212,155,44)" fg:x="274" fg:w="1"/><text x="97.4131%" y="575.50"></text></g><g><title>`0x7FFC3F24E8EF (5 samples, 1.77%)</title><rect x="96.0993%" y="741" width="1.7730%" height="15" fill="rgb(226,2,50)" fg:x="271" fg:w="5"/><text x="96.3493%" y="751.50">`..</text></g><g><title>`0x7FFC3F1946BB (5 samples, 1.77%)</title><rect x="96.0993%" y="725" width="1.7730%" height="15" fill="rgb(234,177,6)" fg:x="271" fg:w="5"/><text x="96.3493%" y="735.50">`..</text></g><g><title>`0x7FFC3F194906 (5 samples, 1.77%)</title><rect x="96.0993%" y="709" width="1.7730%" height="15" fill="rgb(217,24,9)" fg:x="271" fg:w="5"/><text x="96.3493%" y="719.50">`..</text></g><g><title>`0x7FFC3F1958C4 (5 samples, 1.77%)</title><rect x="96.0993%" y="693" width="1.7730%" height="15" fill="rgb(220,13,46)" fg:x="271" fg:w="5"/><text x="96.3493%" y="703.50">`..</text></g><g><title>`0x7FFC3F19CE29 (5 samples, 1.77%)</title><rect x="96.0993%" y="677" width="1.7730%" height="15" fill="rgb(239,221,27)" fg:x="271" fg:w="5"/><text x="96.3493%" y="687.50">`..</text></g><g><title>`0x7FFC3F19C3F8 (4 samples, 1.42%)</title><rect x="96.4539%" y="661" width="1.4184%" height="15" fill="rgb(222,198,25)" fg:x="272" fg:w="4"/><text x="96.7039%" y="671.50"></text></g><g><title>`0x7FFC3F194749 (1 samples, 0.35%)</title><rect x="97.5177%" y="645" width="0.3546%" height="15" fill="rgb(211,99,13)" fg:x="275" fg:w="1"/><text x="97.7677%" y="655.50"></text></g><g><title>`0x7FFC3F1E2EEF (1 samples, 0.35%)</title><rect x="97.5177%" y="629" width="0.3546%" height="15" fill="rgb(232,111,31)" fg:x="275" fg:w="1"/><text x="97.7677%" y="639.50"></text></g><g><title>`0x7FFC3F1A4D44 (1 samples, 0.35%)</title><rect x="97.5177%" y="613" width="0.3546%" height="15" fill="rgb(245,82,37)" fg:x="275" fg:w="1"/><text x="97.7677%" y="623.50"></text></g><g><title>`0x7FFC3F1A4EE6 (1 samples, 0.35%)</title><rect x="97.5177%" y="597" width="0.3546%" height="15" fill="rgb(227,149,46)" fg:x="275" fg:w="1"/><text x="97.7677%" y="607.50"></text></g><g><title>`0x7FFC3F2122E4 (1 samples, 0.35%)</title><rect x="97.5177%" y="581" width="0.3546%" height="15" fill="rgb(218,36,50)" fg:x="275" fg:w="1"/><text x="97.7677%" y="591.50"></text></g><g><title>`0x7FFC3F24E8F7 (1 samples, 0.35%)</title><rect x="97.8723%" y="741" width="0.3546%" height="15" fill="rgb(226,80,48)" fg:x="276" fg:w="1"/><text x="98.1223%" y="751.50"></text></g><g><title>`0x7FFC3F19A00E (1 samples, 0.35%)</title><rect x="97.8723%" y="725" width="0.3546%" height="15" fill="rgb(238,224,15)" fg:x="276" fg:w="1"/><text x="98.1223%" y="735.50"></text></g><g><title>`0x7FFC3F20F3F4 (1 samples, 0.35%)</title><rect x="97.8723%" y="709" width="0.3546%" height="15" fill="rgb(241,136,10)" fg:x="276" fg:w="1"/><text x="98.1223%" y="719.50"></text></g><g><title>`0x7FFC3F1DCDFE (1 samples, 0.35%)</title><rect x="98.2270%" y="709" width="0.3546%" height="15" fill="rgb(208,32,45)" fg:x="277" fg:w="1"/><text x="98.4770%" y="719.50"></text></g><g><title>`0x7FFC3F1DD04D (1 samples, 0.35%)</title><rect x="98.2270%" y="693" width="0.3546%" height="15" fill="rgb(207,135,9)" fg:x="277" fg:w="1"/><text x="98.4770%" y="703.50"></text></g><g><title>`0x7FFC3F19869F (1 samples, 0.35%)</title><rect x="98.2270%" y="677" width="0.3546%" height="15" fill="rgb(206,86,44)" fg:x="277" fg:w="1"/><text x="98.4770%" y="687.50"></text></g><g><title>`0x7FFC3BE7A067 (1 samples, 0.35%)</title><rect x="98.2270%" y="661" width="0.3546%" height="15" fill="rgb(245,177,15)" fg:x="277" fg:w="1"/><text x="98.4770%" y="671.50"></text></g><g><title>`0x7FFC3BE73524 (1 samples, 0.35%)</title><rect x="98.2270%" y="645" width="0.3546%" height="15" fill="rgb(206,64,50)" fg:x="277" fg:w="1"/><text x="98.4770%" y="655.50"></text></g><g><title>`0x7FFC3BE78645 (1 samples, 0.35%)</title><rect x="98.2270%" y="629" width="0.3546%" height="15" fill="rgb(234,36,40)" fg:x="277" fg:w="1"/><text x="98.4770%" y="639.50"></text></g><g><title>`0x7FFC3CDB7853 (1 samples, 0.35%)</title><rect x="98.5816%" y="645" width="0.3546%" height="15" fill="rgb(213,64,8)" fg:x="278" fg:w="1"/><text x="98.8316%" y="655.50"></text></g><g><title>`0x7FFC3CDB816A (1 samples, 0.35%)</title><rect x="98.5816%" y="629" width="0.3546%" height="15" fill="rgb(210,75,36)" fg:x="278" fg:w="1"/><text x="98.8316%" y="639.50"></text></g><g><title>`0x7FFC3CDA6544 (1 samples, 0.35%)</title><rect x="98.5816%" y="613" width="0.3546%" height="15" fill="rgb(229,88,21)" fg:x="278" fg:w="1"/><text x="98.8316%" y="623.50"></text></g><g><title>`0x7FFC3CDA66CF (1 samples, 0.35%)</title><rect x="98.5816%" y="597" width="0.3546%" height="15" fill="rgb(252,204,47)" fg:x="278" fg:w="1"/><text x="98.8316%" y="607.50"></text></g><g><title>`0x7FFC3CDA6941 (1 samples, 0.35%)</title><rect x="98.5816%" y="581" width="0.3546%" height="15" fill="rgb(208,77,27)" fg:x="278" fg:w="1"/><text x="98.8316%" y="591.50"></text></g><g><title>`0x7FFC3CDA8360 (1 samples, 0.35%)</title><rect x="98.5816%" y="565" width="0.3546%" height="15" fill="rgb(221,76,26)" fg:x="278" fg:w="1"/><text x="98.8316%" y="575.50"></text></g><g><title>`0x7FFC3CDA8B0D (1 samples, 0.35%)</title><rect x="98.5816%" y="549" width="0.3546%" height="15" fill="rgb(225,139,18)" fg:x="278" fg:w="1"/><text x="98.8316%" y="559.50"></text></g><g><title>`0x7FFC3CDA86DB (1 samples, 0.35%)</title><rect x="98.5816%" y="533" width="0.3546%" height="15" fill="rgb(230,137,11)" fg:x="278" fg:w="1"/><text x="98.8316%" y="543.50"></text></g><g><title>`0x7FFC3C5CF5D2 (1 samples, 0.35%)</title><rect x="98.5816%" y="517" width="0.3546%" height="15" fill="rgb(212,28,1)" fg:x="278" fg:w="1"/><text x="98.8316%" y="527.50"></text></g><g><title>`0x7FFC3D117BE7 (1 samples, 0.35%)</title><rect x="98.9362%" y="645" width="0.3546%" height="15" fill="rgb(248,164,17)" fg:x="279" fg:w="1"/><text x="99.1862%" y="655.50"></text></g><g><title>`0x7FFC3D117EEC (1 samples, 0.35%)</title><rect x="98.9362%" y="629" width="0.3546%" height="15" fill="rgb(222,171,42)" fg:x="279" fg:w="1"/><text x="99.1862%" y="639.50"></text></g><g><title>`0x7FFC3D14E220 (1 samples, 0.35%)</title><rect x="98.9362%" y="613" width="0.3546%" height="15" fill="rgb(243,84,45)" fg:x="279" fg:w="1"/><text x="99.1862%" y="623.50"></text></g><g><title>`0x7FFC3D14E913 (1 samples, 0.35%)</title><rect x="98.9362%" y="597" width="0.3546%" height="15" fill="rgb(252,49,23)" fg:x="279" fg:w="1"/><text x="99.1862%" y="607.50"></text></g><g><title>`0x7FFC3F1E3EB3 (27 samples, 9.57%)</title><rect x="90.0709%" y="773" width="9.5745%" height="15" fill="rgb(215,19,7)" fg:x="254" fg:w="27"/><text x="90.3209%" y="783.50">`0x7FFC3F1E3EB3</text></g><g><title>`0x7FFC3F23A184 (26 samples, 9.22%)</title><rect x="90.4255%" y="757" width="9.2199%" height="15" fill="rgb(238,81,41)" fg:x="255" fg:w="26"/><text x="90.6755%" y="767.50">`0x7FFC3F23A1..</text></g><g><title>`0x7FFC3F24EA75 (4 samples, 1.42%)</title><rect x="98.2270%" y="741" width="1.4184%" height="15" fill="rgb(210,199,37)" fg:x="277" fg:w="4"/><text x="98.4770%" y="751.50"></text></g><g><title>`0x7FFC3F1DCE70 (4 samples, 1.42%)</title><rect x="98.2270%" y="725" width="1.4184%" height="15" fill="rgb(244,192,49)" fg:x="277" fg:w="4"/><text x="98.4770%" y="735.50"></text></g><g><title>`0x7FFC3F1DCE70 (3 samples, 1.06%)</title><rect x="98.5816%" y="709" width="1.0638%" height="15" fill="rgb(226,211,11)" fg:x="278" fg:w="3"/><text x="98.8316%" y="719.50"></text></g><g><title>`0x7FFC3F1DCDFE (3 samples, 1.06%)</title><rect x="98.5816%" y="693" width="1.0638%" height="15" fill="rgb(236,162,54)" fg:x="278" fg:w="3"/><text x="98.8316%" y="703.50"></text></g><g><title>`0x7FFC3F1DD04D (3 samples, 1.06%)</title><rect x="98.5816%" y="677" width="1.0638%" height="15" fill="rgb(220,229,9)" fg:x="278" fg:w="3"/><text x="98.8316%" y="687.50"></text></g><g><title>`0x7FFC3F19869F (3 samples, 1.06%)</title><rect x="98.5816%" y="661" width="1.0638%" height="15" fill="rgb(250,87,22)" fg:x="278" fg:w="3"/><text x="98.8316%" y="671.50"></text></g><g><title>`0x7FFC3D117C3F (1 samples, 0.35%)</title><rect x="99.2908%" y="645" width="0.3546%" height="15" fill="rgb(239,43,17)" fg:x="280" fg:w="1"/><text x="99.5408%" y="655.50"></text></g><g><title>`0x7FFC3D14D8A3 (1 samples, 0.35%)</title><rect x="99.2908%" y="629" width="0.3546%" height="15" fill="rgb(231,177,25)" fg:x="280" fg:w="1"/><text x="99.5408%" y="639.50"></text></g><g><title>`0x7FFC3D17AD68 (1 samples, 0.35%)</title><rect x="99.2908%" y="613" width="0.3546%" height="15" fill="rgb(219,179,1)" fg:x="280" fg:w="1"/><text x="99.5408%" y="623.50"></text></g><g><title>all (282 samples, 100%)</title><rect x="0.0000%" y="805" width="100.0000%" height="15" fill="rgb(238,219,53)" fg:x="0" fg:w="282"/><text x="0.2500%" y="815.50"></text></g><g><title>`0x7FFC3F1E3DDE (28 samples, 9.93%)</title><rect x="90.0709%" y="789" width="9.9291%" height="15" fill="rgb(232,167,36)" fg:x="254" fg:w="28"/><text x="90.3209%" y="799.50">`0x7FFC3F1E3DDE</text></g><g><title>`0x7FFC3F21D3F3 (1 samples, 0.35%)</title><rect x="99.6454%" y="773" width="0.3546%" height="15" fill="rgb(244,19,51)" fg:x="281" fg:w="1"/><text x="99.8954%" y="783.50"></text></g><g><title>`0x7FFC3F21DB6D (1 samples, 0.35%)</title><rect x="99.6454%" y="757" width="0.3546%" height="15" fill="rgb(224,6,22)" fg:x="281" fg:w="1"/><text x="99.8954%" y="767.50"></text></g><g><title>`0x7FFC3F19B0B2 (1 samples, 0.35%)</title><rect x="99.6454%" y="741" width="0.3546%" height="15" fill="rgb(224,145,5)" fg:x="281" fg:w="1"/><text x="99.8954%" y="751.50"></text></g><g><title>`0x7FFC3F19BBC7 (1 samples, 0.35%)</title><rect x="99.6454%" y="725" width="0.3546%" height="15" fill="rgb(234,130,49)" fg:x="281" fg:w="1"/><text x="99.8954%" y="735.50"></text></g></svg></svg>